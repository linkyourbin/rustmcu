[{"content":"由于\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于\u003c/p\u003e","title":"一分钟，搭建`Rust RP 2040/235X Pico(2)`开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)`开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下 ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003ch2 id=\"rp-2040-pico部分重要信息如下\"\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/h2\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv6m-none-eabi ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv6m-none-eabi ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\u003c/li\u003e\n\u003c/ul\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv6m-none-eabi ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf ","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 教程会侧重使用RP 2350 Pico2进行演示，\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e教程会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示，\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/235X Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"可以本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e可以本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客当作一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客当作一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify即可，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e即可，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt'文件，将内容粘贴进去后，再将） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt'文件，将内容粘贴进去后，再将\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将`） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将`）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 至于nvim和zed或者是helix 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是\u003ccode\u003ehelix\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上插件，直接复制名称在vscode的插件市场安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上插件，直接复制名称在\u003ccode\u003evscode\u003c/code\u003e的插件市场安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称在vscode的插件市场安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称在\u003ccode\u003evscode\u003c/code\u003e的插件市场安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，进行安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，进行安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter） 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 故只需要打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n故只需要打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分\u003c/p\u003e","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要是一些不太好进行归类的内容，其中可能会涵盖\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要是一些不太好进行归类的内容，其中可能会涵盖\u003c/p\u003e","title":"Miscellanea"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要是一些不太好进行归类的内容，其中可能会涵盖\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要是一些不太好进行归类的内容，其中可能会涵盖\u003c/p\u003e","title":"杂记/小记"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要是一些不太好进行归类的内容，其中可能会涵盖PCB设计，大模型微调\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要是一些不太好进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e\u003c/p\u003e","title":"杂记/小记"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要是一些不太好进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧）\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要是一些不太好进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧）\u003c/p\u003e","title":"杂记/小记"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧）\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧）\u003c/p\u003e","title":"杂记/小记"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发\u003c/p\u003e","title":"杂记/小记"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式\u003c/p\u003e","title":"杂记/小记"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e","title":"杂记/小记"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。 ","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003ch2 id=\"这一部分主要整合一些不方便进行归类的内容其中可能会涵盖pcb设计大模型微调你没听错你甚至能在一个rust-mcu的博客里看到微调大模型的技巧上位机开发rust嵌入式小项目c嵌入式rust编写实用工具等内容\"\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/h2\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"RUST MCU Intro"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e2~4层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2~4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2~4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：STM32 LED Blinky"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：点亮LED"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：点亮LED（GPIO）"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/rustmcu/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/rustmcu/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟安装 ESP32 Rust 开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链 打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community 打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n","permalink":"http://localhost:1313/rustmcu/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/rustmcu/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e至此，若只开发\u003ccode\u003eSTM32\u003c/code\u003e常用芯片（\u003ccode\u003eSTM32F1xx\u003c/code\u003e, \u003ccode\u003eSTM32F4xx\u003c/code\u003e, \u003ccode\u003eSTM32H7xx\u003c/code\u003e, \u003ccode\u003eSTM32G4xx\u003c/code\u003e），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如\u003ccode\u003eCortex M33\u003c/code\u003e架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助\u003ccode\u003eLLM\u003c/code\u003e）。至于\u003ccode\u003eRP 2040/235X Pico(2)\u003c/code\u003e和\u003ccode\u003eESP32\u003c/code\u003e的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\u003c/p\u003e","title":"五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海"},{"content":"","permalink":"http://localhost:1313/rustmcu/rp/blinky/","summary":"","title":"Blinky"},{"content":"","permalink":"http://localhost:1313/rustmcu/esp32/blinky/","summary":"","title":"00：点亮一个LED"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/rustmcu/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 ","permalink":"http://localhost:1313/rustmcu/stm32/blinky/","summary":"\u003chr\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e","title":"00：点亮LED（GPIO）"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/rustmcu/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"}]