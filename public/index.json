[{"content":"使用esp-generate生成一个初始工程 进行此实验前，务必先查看基础环境搭建，完成之后，继续完成ESP32 Rust环境搭建，\n完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（Enter）。也可以先输入esp-generate，按下回车（Enter）之后，再根据提示一步一步选择。\n1 esp-generate --chip=esp32c3 esp32c3_embassy_dht11_demo 稍微解释一下，上面这行命令的作用\n1 2 3 esp3-generate # 调用该工具 --chip=esp32c3 # 传入参数，指定芯片具体名称 esp32c3_embassy_dht11_demo # 待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告 此时，命令行会打开一个类似GUI的界面，使用键盘上的“上下左右”箭头来选择相应的feature，高亮部分即代表待选中的feature，按下回车（Enter）则会选中此项feature，并且在此feature前显示✅\nfeature前带有[▶]符号，表示该feature含有多个子feature，使用箭头选中高亮，并且按下回车（Enter）后，会打开新的界面。\n此时，高亮区域选中了▶ Flashing, logging and debugging (espflash)，按下回车（Enter），来到新的界面。\n选中下图的feature，按照从上至下排序，当前选中了2和3。\n注意：1和2只能二选一，工程里编写代码时也只能二选一，否则会报错。\n完成选定后，按下ESC，返回主界面，继续开启feature。\n此时，高亮区域选中了▶ Optional editor integration，按下回车（Enter），来到新的界面。\n这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\n选定上图feature后，继续按下ESC，回到主界面。\n此时，我们已经选定了所有feature，按下S即Save，即可保存并且生成工程。终端里也会有提示信息。\n1 2 3 🆗 Rust (stable): 1.89.0 🆗 espflash: 4.0.1 🆗 probe-rs: 0.29.1 至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\n","permalink":"http://localhost:1313/esp32/esp-generate-template/","summary":"\u003ch1 id=\"使用esp-generate生成一个初始工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成一个初始工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e进行此实验前，务必先查看\u003ca href=\"/toolchain/stm32-dev-env-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e基础环境搭建\u003c/a\u003e，完成之后，继续完成\u003ca href=\"/toolchain/esp32-dev-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003eESP32 Rust环境搭建\u003c/a\u003e，\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）。也可以先输入\u003ccode\u003eesp-generate\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）之后，再根据提示一步一步选择。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp-generate --chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3 esp32c3_embassy_dht11_demo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e稍微解释一下，上面这行命令的作用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp3-generate \u003cspan class=\"c1\"\u003e# 调用该工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e--chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3  \u003cspan class=\"c1\"\u003e# 传入参数，指定芯片具体名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp32c3_embassy_dht11_demo  \u003cspan class=\"c1\"\u003e#   待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e此时，命令行会打开一个类似\u003ccode\u003eGUI\u003c/code\u003e的界面，使用键盘上的“上下左右”箭头来选择相应的\u003ccode\u003efeature\u003c/code\u003e，高亮部分即代表待选中的\u003ccode\u003efeature\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）则会选中此项\u003ccode\u003efeature\u003c/code\u003e，并且在此\u003ccode\u003efeature\u003c/code\u003e前显示\u003cspan style=\"color: green;\"\u003e✅\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-00.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efeature\u003c/code\u003e前带有\u003cspan style=\"color: gray;\"\u003e[▶]\u003c/span\u003e符号，表示该\u003ccode\u003efeature\u003c/code\u003e含有多个子\u003ccode\u003efeature\u003c/code\u003e，使用箭头选中高亮，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）后，会打开新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-01.png\"\u003e\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Flashing, logging and debugging (espflash)\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-02.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选中下图的\u003ccode\u003efeature\u003c/code\u003e，按照从上至下排序，当前选中了\u003ccode\u003e2\u003c/code\u003e和\u003ccode\u003e3\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-03.png\"\u003e\u003c/p\u003e\n\u003cp\u003e注意：\u003ccode\u003e1\u003c/code\u003e和\u003ccode\u003e2\u003c/code\u003e只能二选一，工程里编写代码时也只能二选一，否则会报错。\u003c/p\u003e\n\u003cp\u003e完成选定后，按下\u003ccode\u003eESC\u003c/code\u003e，返回主界面，继续开启\u003ccode\u003efeature\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Optional editor integration\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-04.png\"\u003e\u003c/p\u003e\n\u003cp\u003e这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-05.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选定上图\u003ccode\u003efeature\u003c/code\u003e后，继续按下\u003ccode\u003eESC\u003c/code\u003e，回到主界面。\u003c/p\u003e\n\u003cp\u003e此时，我们已经选定了所有\u003ccode\u003efeature\u003c/code\u003e，按下\u003ccode\u003eS\u003c/code\u003e即\u003ccode\u003eSave\u003c/code\u003e，即可保存并且生成工程。终端里也会有提示信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-06.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 Rust \u003cspan class=\"o\"\u003e(\u003c/span\u003estable\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 1.89.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 espflash: 4.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 probe-rs: 0.29.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\u003c/p\u003e","title":"配置ESP32模板工程，此后的所有工程均可按此流程配置"},{"content":"前言和实验结果 跳过Hello World，即点亮LED，直接实战读取DHT11温湿度传感器。\n最后实现的效果如下。\n如上图，可以在终端Terminal里直接看到DHT11测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\n使用esp-generate生成模板工程 由于过程具有重复性，故不再重复演示，请点击跳转使用esp-generate生成一个ESP32初始工程\n打开工程 导入需要用到的crate，在工程根目录下打开终端，输入以下命令，并按下回车（Enter） 1 cargo add esp32-dht11-rs 在main.rs里输入以下代码\n在头部的位置，先引入需要使用的crate 1 2 use esp32_dht11_rs::{DHT11}; use esp_hal::delay::Delay; 接着，来到main函数里 1 2 3 let delay = Delay::new(); let mut dht11 = DHT11::new(peripherals.GPIO0, delay); let mut dht11_read_counter = 1; 再将以下内容复制到loop函数里 1 2 3 4 5 6 match dht11.read() { Ok(m) =\u0026gt; println!(\u0026#34;DHT11 TEMP is: {}℃ DHT11 HUMI is:{}% measuring for [NO.{:?}] time\u0026#34;, m.temperature, m.humidity, dht11_read_counter), Err(error) =\u0026gt; println!(\u0026#34;error occured: {:?}\u0026#34;, error), } Timer::after_millis(2000).await; dht11_read_counter += 1; 断电前提下，连接硬件\n功能 DHT11 ESP32C3 电源正极 VCC 3V3 地线 GND GND 数据线 D / DAT GPIO0 / 引脚 0 连接好硬件之后，将开发板连接到电脑，回到终端，输入以下命令\n需要自行安装CH34x的驱动，这一步不做说明，自行安装即可。\n1 cargo run --release 可以看到终端里在进行编译compiling。\n完成之后，会自动进行烧录，期间不需要按开发板上的任何按键（试过很多板子，都不需要按BOOT）。\n烧录完成后，正常在终端里打印信息，若是用手握住DHT11模块，湿度会瞬间上升，温度也会开始缓慢上升（假定你手现在并没有进行过冷冻处理，是正常体温。），说明模块工作正常，程序正常运行。\n","permalink":"http://localhost:1313/esp32/esp32c3_dht11/","summary":"\u003ch1 id=\"前言和实验结果\"\u003e前言和实验结果\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e跳过\u003ccode\u003eHello World\u003c/code\u003e，即点亮\u003ccode\u003eLED\u003c/code\u003e，直接实战读取\u003ccode\u003eDHT11\u003c/code\u003e温湿度传感器。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e最后实现的效果如下。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/esp32c3/dht11/dht11-measuring-result.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如上图，可以在终端\u003ccode\u003eTerminal\u003c/code\u003e里直接看到\u003ccode\u003eDHT11\u003c/code\u003e测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"使用esp-generate生成模板工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成模板工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由于过程具有重复性，故不再重复演示，请点击跳转\u003ca href=\"/esp32/esp-generate-template/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e使用esp-generate生成一个ESP32初始工程\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"打开工程\"\u003e打开工程\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e导入需要用到的\u003ccode\u003ecrate\u003c/code\u003e，在工程根目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecargo\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ers\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在\u003ccode\u003emain.rs\u003c/code\u003e里输入以下代码\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在头部的位置，先引入需要使用的\u003ccode\u003ecrate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32_dht11_rs\u003c/span\u003e::\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp_hal\u003c/span\u003e::\u003cspan class=\"n\"\u003edelay\u003c/span\u003e::\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接着，来到\u003ccode\u003emain\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperipherals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"no\"\u003eGPIO0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e再将以下内容复制到\u003ccode\u003eloop\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DHT11 TEMP is: \u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e℃ DHT11 HUMI is:\u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e% measuring for [NO.\u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e] time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etemperature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehumidity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;error occured: \u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eTimer\u003c/span\u003e::\u003cspan class=\"n\"\u003eafter_millis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"k\"\u003eawait\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e断电前提下，连接硬件\u003c/p\u003e","title":"ESP32C3读取DHT11温湿度信息"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟，搭建ESP32 Rust开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 综上，搭建了一个基础的Rust嵌入式开发环境，之后的教程主要使用STM32, ESP32, RP2040 Pico, RP2350 Pico2等MCU进行演示。\n至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链\n打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community\n打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n视频版本，可以点击跳转到Bilibili观看 视频录制的时间可能有些早，但是内容完全一样，若是视频无法复现，可以先按照博客的图文进行操作，若还是失败，可以在视频平台给我私信。\n","permalink":"http://localhost:1313/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e综上，搭建了一个基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式开发环境，之后的教程主要使用\u003ccode\u003eSTM32\u003c/code\u003e, \u003ccode\u003eESP32\u003c/code\u003e, \u003ccode\u003eRP2040 Pico, RP2350 Pico2\u003c/code\u003e等\u003ccode\u003eMCU\u003c/code\u003e进行演示。\u003c/p\u003e","title":"五分钟，搭建Rust嵌入式开发环境"},{"content":"","permalink":"http://localhost:1313/rp/blinky/","summary":"","title":"Blinky"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 硬件接线 Peri STM32 LED PC0 ST-Link SWDIO SWDIO/PA13 ST-Link SWCLK SWCLk/PA14 ST-Link GND GND ST-Link 3V3 3V3 电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用Type-C/USB给板子5V供电，5V直流通过LDO或者DC/DC转为3V3后再给相应外设板子供电，这样会更稳定，若是部分外设需要5V供电，但系统里并未接入5V直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\n创建工程 一般来说，可以直接使用一些别人写好的工具来创建模板（在crates.io上可以找到），类似esp-generate这样的工具，但是，由于rust+embassy一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从cargo new xxx开始一个嵌入式rust的工程。\n创建空白工程 创建一个空白工程 打开终端，输入：\n1 cargo new stm32_blinky 注意：工程名最好是snake_case。 使用vscode打开所创建的工程 工程目录如下图所示，标准的hello world工程。\n移植embassy 参考embassy仓库的工程进行工程移植，点击跳转embassy stm32f4 examples\n在自己的工程根目录里创建两个目录，并且新建文件\n1 2 .config/config.toml .vscode/settings.json 将以下图中内容，复制到.cargo/config.toml里 1 2 3 4 5 6 7 8 9 [target.\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;] # replace STM32F407VETx with your chip as listed in `probe-rs chip list` runner = \u0026#34;probe-rs run --chip STM32F407VETx\u0026#34; [build] target = \u0026#34;thumbv7em-none-eabihf\u0026#34; [env] DEFMT_LOG = \u0026#34;trace\u0026#34; 注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（--chip xxx），还有编译器（target = \u0026quot;xxx\u0026quot;）。\n具体做法是：\n先看自己的开发板是什么型号，例如，我手里的是STM32F407VET6，这个型号在购买开发板的时候可以看到，也可以在芯片上直接读到，由于不确定配置文件里的芯片名称格式，所以需要使用probe-rs提供的命令来查看支持的芯片还有格式书写。\n在终端里输入 1 probe-rs chip list 可以看到，支持的芯片很多，但由于显示的问题，只显示了部分芯片型号。 所以需要进行筛选，确定具体的型号。\n注意，以下命令需要在git bash里进行，若是linux/mac则无需注意。\n在终端里输入 1 probe-rs chip list | grep STM32F4 可以看到，已经筛选出了F4系列的芯片，进一步缩小范围。\n在终端里输入 1 probe-rs chip list | grep STM32F407 可以看到，所列出的芯片型号中，STM32F407VE与我手里的STM32F407VET6就十分接近，那就选这个STM32F407VE填到.cargo/config.toml文件中--chip xxx的位置。\n当然，也可以使用\n1 probe-rs chip list | grep STM32* \u0026gt; chip.txt 将STM32系列的芯片型号，保存到一个chip.txt的文件里，再去手动查找。 在.vscode/settings.json里粘贴以下内容 1 2 3 { \u0026#34;rust-analyzer.check.allTargets\u0026#34;: false } 使用rust做嵌入式开发时，需要no-std，使用以上配置文件，就可以屏蔽报错。\n复制embassy examples里的build.rs到自己的工程里 1 2 3 4 5 fn main() { println!(\u0026#34;cargo:rustc-link-arg-bins=--nmagic\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tlink.x\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tdefmt.x\u0026#34;); } 复制必要的依赖配置到根目录里的Cargo.toml文件里 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [package] name = \u0026#34;stm32_blinky\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2024\u0026#34; [dependencies] embassy-stm32 = { version = \u0026#34;0.4.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;stm32f407ve\u0026#34;, \u0026#34;unstable-pac\u0026#34;, \u0026#34;memory-x\u0026#34;, \u0026#34;time-driver-any\u0026#34;, \u0026#34;exti\u0026#34;, \u0026#34;chrono\u0026#34;] } embassy-sync = { version = \u0026#34;0.7.2\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-executor = { version = \u0026#34;0.9.0\u0026#34;, features = [\u0026#34;arch-cortex-m\u0026#34;, \u0026#34;executor-thread\u0026#34;, \u0026#34;executor-interrupt\u0026#34;, \u0026#34;defmt\u0026#34;] } embassy-time = { version = \u0026#34;0.5.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;defmt-timestamp-uptime\u0026#34;, \u0026#34;tick-hz-32_768\u0026#34;] } embassy-usb = { version = \u0026#34;0.5.1\u0026#34;, features = [\u0026#34;defmt\u0026#34; ] } embassy-net = { version = \u0026#34;0.7.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;tcp\u0026#34;, \u0026#34;dhcpv4\u0026#34;, \u0026#34;medium-ethernet\u0026#34;, ] } embassy-net-wiznet = { version = \u0026#34;0.2.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-futures = { version = \u0026#34;0.1.2\u0026#34;} defmt = \u0026#34;1.0.1\u0026#34; defmt-rtt = \u0026#34;1.0.0\u0026#34; cortex-m = { version = \u0026#34;0.7.6\u0026#34;, features = [\u0026#34;inline-asm\u0026#34;, \u0026#34;critical-section-single-core\u0026#34;] } cortex-m-rt = \u0026#34;0.7.0\u0026#34; embedded-hal = \u0026#34;0.2.6\u0026#34; embedded-hal-bus = { version = \u0026#34;0.2\u0026#34;, features = [\u0026#34;async\u0026#34;] } embedded-io = { version = \u0026#34;0.6.0\u0026#34; } embedded-io-async = { version = \u0026#34;0.6.1\u0026#34; } panic-probe = { version = \u0026#34;1.0.0\u0026#34;, features = [\u0026#34;print-defmt\u0026#34;] } futures-util = { version = \u0026#34;0.3.30\u0026#34;, default-features = false } heapless = { version = \u0026#34;0.8\u0026#34;, default-features = false } critical-section = \u0026#34;1.1\u0026#34; nb = \u0026#34;1.0.0\u0026#34; embedded-storage = \u0026#34;0.3.1\u0026#34; micromath = \u0026#34;2.0.0\u0026#34; usbd-hid = \u0026#34;0.8.1\u0026#34; static_cell = \u0026#34;2\u0026#34; chrono = { version = \u0026#34;^0.4\u0026#34;, default-features = false} [profile.release] debug = 2 注意：以上配置，均是来自embassy仓库，只是将path字段删除了，在编译的时候，会自动在线拉取，因为我们并没有将这些库拉取到本地，所以这个字段可以删除，当然也有其他配置的方式，例如指定git，大家感兴趣可以自行去探索。\n大家可以自行对比，进行移植。最简单的方式就是复制上面的配置文件到自己的Cargo.toml文件里，再将embassy-stm32 = { version = \u0026quot;0.4.0\u0026quot;, features = [\u0026quot;defmt\u0026quot;, \u0026quot;stm32f407ve\u0026quot;, \u0026quot;unstable-pac\u0026quot;, \u0026quot;memory-x\u0026quot;, \u0026quot;time-driver-any\u0026quot;, \u0026quot;exti\u0026quot;, \u0026quot;chrono\u0026quot;] }这个依赖里的stm32f407ve修改为前文教大家适配的自己的芯片型号即可。\n编写代码点灯 完成了以上工程创建之后，就可以开始写代码点灯了。当然了，第一次，还是直接复制粘贴，局部调整即可。\n将以下代码，粘贴到main.rs里。\nCV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #![no_std] #![no_main] use defmt::*; use embassy_executor::Spawner; use embassy_stm32::gpio::{Level, Output, Speed}; use embassy_time::Timer; use {defmt_rtt as _, panic_probe as _}; #[embassy_executor::main] async fn main(_spawner: Spawner) { let p = embassy_stm32::init(Default::default()); info!(\u0026#34;Hello World!\u0026#34;); let mut led = Output::new(p.PC0, Level::High, Speed::Low); loop { info!(\u0026#34;high\u0026#34;); led.set_high(); Timer::after_millis(300).await; info!(\u0026#34;low\u0026#34;); led.set_low(); Timer::after_millis(300).await; } } 只需要将PC0修改为自己板子所连接LED的引脚即可。\n1 let mut led = Output::new(p.PC0, Level::High, Speed::Low); 烧录 确保烧录器、开发板、电脑连接无误，供电正常。\n打开终端，输入\n1 cargo run --release 开始编译，可以看到编译进度。\n编译完成后，开始下载，并且会在终端里打印出info函数里的内容。（可以用来做类似串口调试的工具。）\n至此，恭喜你完成了在STM32单片机上，使用RUST语言点灯。\n所有的伟大，源于一个勇敢的开始。😊\n","permalink":"http://localhost:1313/stm32/blinky/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"硬件接线\"\u003e硬件接线\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePeri\u003c/th\u003e\n          \u003cth\u003eSTM32\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLED\u003c/td\u003e\n          \u003ctd\u003ePC0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWDIO\u003c/td\u003e\n          \u003ctd\u003eSWDIO/PA13\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWCLK\u003c/td\u003e\n          \u003ctd\u003eSWCLk/PA14\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link GND\u003c/td\u003e\n          \u003ctd\u003eGND\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link 3V3\u003c/td\u003e\n          \u003ctd\u003e3V3\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用\u003ccode\u003eType-C/USB\u003c/code\u003e给板子\u003ccode\u003e5V\u003c/code\u003e供电，\u003ccode\u003e5V\u003c/code\u003e直流通过\u003ccode\u003eLDO\u003c/code\u003e或者\u003ccode\u003eDC/DC\u003c/code\u003e转为\u003ccode\u003e3V3\u003c/code\u003e后再给相应外设板子供电，这样会更稳定，若是部分外设需要\u003ccode\u003e5V\u003c/code\u003e供电，但系统里并未接入\u003ccode\u003e5V\u003c/code\u003e直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"创建工程\"\u003e创建工程\u003c/h1\u003e\n\u003cp\u003e一般来说，可以直接使用一些别人写好的工具来创建模板（在\u003ccode\u003ecrates.io\u003c/code\u003e上可以找到），类似\u003ccode\u003eesp-generate\u003c/code\u003e这样的工具，但是，由于\u003ccode\u003erust+embassy\u003c/code\u003e一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从\u003ccode\u003ecargo new xxx\u003c/code\u003e开始一个嵌入式\u003ccode\u003erust\u003c/code\u003e的工程。\u003c/p\u003e\n\u003ch2 id=\"创建空白工程\"\u003e创建空白工程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e创建一个空白工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e打开终端，输入：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo new stm32_blinky\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：工程名最好是\u003ccode\u003esnake_case\u003c/code\u003e。\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/00_new_project.png\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e使用\u003ccode\u003evscode\u003c/code\u003e打开所创建的工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e工程目录如下图所示，标准的\u003ccode\u003ehello world\u003c/code\u003e工程。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/01_open_project.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"移植embassy\"\u003e移植\u003ccode\u003eembassy\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e参考\u003ccode\u003eembassy\u003c/code\u003e仓库的工程进行工程移植，点击跳转\u003ca href=\"https://github.com/embassy-rs/embassy/tree/main/examples/stm32f4\"\u003e\u003ccode\u003eembassy stm32f4 examples\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在自己的工程根目录里创建两个目录，并且新建文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.config/config.toml\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.vscode/settings.json\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e将以下图中内容，复制到\u003ccode\u003e.cargo/config.toml\u003c/code\u003e里\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/02_embassy_config.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# replace STM32F407VETx with your chip as listed in `probe-rs chip list`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003erunner\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;probe-rs run --chip STM32F407VETx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;thumbv7em-none-eabihf\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eDEFMT_LOG\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;trace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（\u003ccode\u003e--chip xxx\u003c/code\u003e），还有编译器（\u003ccode\u003etarget = \u0026quot;xxx\u0026quot;\u003c/code\u003e）。\u003c/p\u003e","title":"00：点亮LED（GPIO）"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"","permalink":"http://localhost:1313/py32/ssd1306/","summary":"","title":"Ssd1306"},{"content":"使用esp-generate生成一个初始工程 进行此实验前，务必先查看基础环境搭建，完成之后，继续完成ESP32 Rust环境搭建，\n完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（Enter）。也可以先输入esp-generate，按下回车（Enter）之后，再根据提示一步一步选择。\n1 esp-generate --chip=esp32c3 esp32c3_embassy_dht11_demo 稍微解释一下，上面这行命令的作用\n1 2 3 esp3-generate # 调用该工具 --chip=esp32c3 # 传入参数，指定芯片具体名称 esp32c3_embassy_dht11_demo # 待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告 此时，命令行会打开一个类似GUI的界面，使用键盘上的“上下左右”箭头来选择相应的feature，高亮部分即代表待选中的feature，按下回车（Enter）则会选中此项feature，并且在此feature前显示✅\nfeature前带有[▶]符号，表示该feature含有多个子feature，使用箭头选中高亮，并且按下回车（Enter）后，会打开新的界面。\n此时，高亮区域选中了▶ Flashing, logging and debugging (espflash)，按下回车（Enter），来到新的界面。\n选中下图的feature，按照从上至下排序，当前选中了2和3。\n注意：1和2只能二选一，工程里编写代码时也只能二选一，否则会报错。\n完成选定后，按下ESC，返回主界面，继续开启feature。\n此时，高亮区域选中了▶ Optional editor integration，按下回车（Enter），来到新的界面。\n这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\n选定上图feature后，继续按下ESC，回到主界面。\n此时，我们已经选定了所有feature，按下S即Save，即可保存并且生成工程。终端里也会有提示信息。\n1 2 3 🆗 Rust (stable): 1.89.0 🆗 espflash: 4.0.1 🆗 probe-rs: 0.29.1 至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\n","permalink":"http://localhost:1313/esp32/esp-generate-template/","summary":"\u003ch1 id=\"使用esp-generate生成一个初始工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成一个初始工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e进行此实验前，务必先查看\u003ca href=\"/toolchain/stm32-dev-env-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e基础环境搭建\u003c/a\u003e，完成之后，继续完成\u003ca href=\"/toolchain/esp32-dev-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003eESP32 Rust环境搭建\u003c/a\u003e，\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）。也可以先输入\u003ccode\u003eesp-generate\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）之后，再根据提示一步一步选择。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp-generate --chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3 esp32c3_embassy_dht11_demo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e稍微解释一下，上面这行命令的作用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp3-generate \u003cspan class=\"c1\"\u003e# 调用该工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e--chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3  \u003cspan class=\"c1\"\u003e# 传入参数，指定芯片具体名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp32c3_embassy_dht11_demo  \u003cspan class=\"c1\"\u003e#   待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e此时，命令行会打开一个类似\u003ccode\u003eGUI\u003c/code\u003e的界面，使用键盘上的“上下左右”箭头来选择相应的\u003ccode\u003efeature\u003c/code\u003e，高亮部分即代表待选中的\u003ccode\u003efeature\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）则会选中此项\u003ccode\u003efeature\u003c/code\u003e，并且在此\u003ccode\u003efeature\u003c/code\u003e前显示\u003cspan style=\"color: green;\"\u003e✅\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-00.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efeature\u003c/code\u003e前带有\u003cspan style=\"color: gray;\"\u003e[▶]\u003c/span\u003e符号，表示该\u003ccode\u003efeature\u003c/code\u003e含有多个子\u003ccode\u003efeature\u003c/code\u003e，使用箭头选中高亮，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）后，会打开新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-01.png\"\u003e\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Flashing, logging and debugging (espflash)\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-02.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选中下图的\u003ccode\u003efeature\u003c/code\u003e，按照从上至下排序，当前选中了\u003ccode\u003e2\u003c/code\u003e和\u003ccode\u003e3\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-03.png\"\u003e\u003c/p\u003e\n\u003cp\u003e注意：\u003ccode\u003e1\u003c/code\u003e和\u003ccode\u003e2\u003c/code\u003e只能二选一，工程里编写代码时也只能二选一，否则会报错。\u003c/p\u003e\n\u003cp\u003e完成选定后，按下\u003ccode\u003eESC\u003c/code\u003e，返回主界面，继续开启\u003ccode\u003efeature\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Optional editor integration\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-04.png\"\u003e\u003c/p\u003e\n\u003cp\u003e这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-05.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选定上图\u003ccode\u003efeature\u003c/code\u003e后，继续按下\u003ccode\u003eESC\u003c/code\u003e，回到主界面。\u003c/p\u003e\n\u003cp\u003e此时，我们已经选定了所有\u003ccode\u003efeature\u003c/code\u003e，按下\u003ccode\u003eS\u003c/code\u003e即\u003ccode\u003eSave\u003c/code\u003e，即可保存并且生成工程。终端里也会有提示信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-06.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 Rust \u003cspan class=\"o\"\u003e(\u003c/span\u003estable\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 1.89.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 espflash: 4.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 probe-rs: 0.29.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\u003c/p\u003e","title":"配置ESP32模板工程，此后的所有工程均可按此流程配置"},{"content":"前言和实验结果 跳过Hello World，即点亮LED，直接实战读取DHT11温湿度传感器。\n最后实现的效果如下。\n如上图，可以在终端Terminal里直接看到DHT11测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\n使用esp-generate生成模板工程 由于过程具有重复性，故不再重复演示，请点击跳转使用esp-generate生成一个ESP32初始工程\n打开工程 导入需要用到的crate，在工程根目录下打开终端，输入以下命令，并按下回车（Enter） 1 cargo add esp32-dht11-rs 在main.rs里输入以下代码\n在头部的位置，先引入需要使用的crate 1 2 use esp32_dht11_rs::{DHT11}; use esp_hal::delay::Delay; 接着，来到main函数里 1 2 3 let delay = Delay::new(); let mut dht11 = DHT11::new(peripherals.GPIO0, delay); let mut dht11_read_counter = 1; 再将以下内容复制到loop函数里 1 2 3 4 5 6 match dht11.read() { Ok(m) =\u0026gt; println!(\u0026#34;DHT11 TEMP is: {}℃ DHT11 HUMI is:{}% measuring for [NO.{:?}] time\u0026#34;, m.temperature, m.humidity, dht11_read_counter), Err(error) =\u0026gt; println!(\u0026#34;error occured: {:?}\u0026#34;, error), } Timer::after_millis(2000).await; dht11_read_counter += 1; 断电前提下，连接硬件\n功能 DHT11 ESP32C3 电源正极 VCC 3V3 地线 GND GND 数据线 D / DAT GPIO0 / 引脚 0 连接好硬件之后，将开发板连接到电脑，回到终端，输入以下命令\n需要自行安装CH34x的驱动，这一步不做说明，自行安装即可。\n1 cargo run --release 可以看到终端里在进行编译compiling。\n完成之后，会自动进行烧录，期间不需要按开发板上的任何按键（试过很多板子，都不需要按BOOT）。\n烧录完成后，正常在终端里打印信息，若是用手握住DHT11模块，湿度会瞬间上升，温度也会开始缓慢上升（假定你手现在并没有进行过冷冻处理，是正常体温。），说明模块工作正常，程序正常运行。\n","permalink":"http://localhost:1313/esp32/esp32c3_dht11/","summary":"\u003ch1 id=\"前言和实验结果\"\u003e前言和实验结果\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e跳过\u003ccode\u003eHello World\u003c/code\u003e，即点亮\u003ccode\u003eLED\u003c/code\u003e，直接实战读取\u003ccode\u003eDHT11\u003c/code\u003e温湿度传感器。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e最后实现的效果如下。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/esp32c3/dht11/dht11-measuring-result.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如上图，可以在终端\u003ccode\u003eTerminal\u003c/code\u003e里直接看到\u003ccode\u003eDHT11\u003c/code\u003e测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"使用esp-generate生成模板工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成模板工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由于过程具有重复性，故不再重复演示，请点击跳转\u003ca href=\"/esp32/esp-generate-template/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e使用esp-generate生成一个ESP32初始工程\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"打开工程\"\u003e打开工程\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e导入需要用到的\u003ccode\u003ecrate\u003c/code\u003e，在工程根目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecargo\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ers\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在\u003ccode\u003emain.rs\u003c/code\u003e里输入以下代码\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在头部的位置，先引入需要使用的\u003ccode\u003ecrate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32_dht11_rs\u003c/span\u003e::\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp_hal\u003c/span\u003e::\u003cspan class=\"n\"\u003edelay\u003c/span\u003e::\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接着，来到\u003ccode\u003emain\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperipherals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"no\"\u003eGPIO0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e再将以下内容复制到\u003ccode\u003eloop\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DHT11 TEMP is: \u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e℃ DHT11 HUMI is:\u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e% measuring for [NO.\u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e] time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etemperature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehumidity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;error occured: \u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eTimer\u003c/span\u003e::\u003cspan class=\"n\"\u003eafter_millis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"k\"\u003eawait\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e断电前提下，连接硬件\u003c/p\u003e","title":"ESP32C3读取DHT11温湿度信息"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟，搭建ESP32 Rust开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 综上，搭建了一个基础的Rust嵌入式开发环境，之后的教程主要使用STM32, ESP32, RP2040 Pico, RP2350 Pico2等MCU进行演示。\n至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链\n打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community\n打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n视频版本，可以点击跳转到Bilibili观看 视频录制的时间可能有些早，但是内容完全一样，若是视频无法复现，可以先按照博客的图文进行操作，若还是失败，可以在视频平台给我私信。\n","permalink":"http://localhost:1313/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e综上，搭建了一个基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式开发环境，之后的教程主要使用\u003ccode\u003eSTM32\u003c/code\u003e, \u003ccode\u003eESP32\u003c/code\u003e, \u003ccode\u003eRP2040 Pico, RP2350 Pico2\u003c/code\u003e等\u003ccode\u003eMCU\u003c/code\u003e进行演示。\u003c/p\u003e","title":"五分钟，搭建Rust嵌入式开发环境"},{"content":"","permalink":"http://localhost:1313/rp/blinky/","summary":"","title":"Blinky"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 硬件接线 Peri STM32 LED PC0 ST-Link SWDIO SWDIO/PA13 ST-Link SWCLK SWCLk/PA14 ST-Link GND GND ST-Link 3V3 3V3 电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用Type-C/USB给板子5V供电，5V直流通过LDO或者DC/DC转为3V3后再给相应外设板子供电，这样会更稳定，若是部分外设需要5V供电，但系统里并未接入5V直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\n创建工程 一般来说，可以直接使用一些别人写好的工具来创建模板（在crates.io上可以找到），类似esp-generate这样的工具，但是，由于rust+embassy一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从cargo new xxx开始一个嵌入式rust的工程。\n创建空白工程 创建一个空白工程 打开终端，输入：\n1 cargo new stm32_blinky 注意：工程名最好是snake_case。 使用vscode打开所创建的工程 工程目录如下图所示，标准的hello world工程。\n移植embassy 参考embassy仓库的工程进行工程移植，点击跳转embassy stm32f4 examples\n在自己的工程根目录里创建两个目录，并且新建文件\n1 2 .config/config.toml .vscode/settings.json 将以下图中内容，复制到.cargo/config.toml里 1 2 3 4 5 6 7 8 9 [target.\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;] # replace STM32F407VETx with your chip as listed in `probe-rs chip list` runner = \u0026#34;probe-rs run --chip STM32F407VETx\u0026#34; [build] target = \u0026#34;thumbv7em-none-eabihf\u0026#34; [env] DEFMT_LOG = \u0026#34;trace\u0026#34; 注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（--chip xxx），还有编译器（target = \u0026quot;xxx\u0026quot;）。\n具体做法是：\n先看自己的开发板是什么型号，例如，我手里的是STM32F407VET6，这个型号在购买开发板的时候可以看到，也可以在芯片上直接读到，由于不确定配置文件里的芯片名称格式，所以需要使用probe-rs提供的命令来查看支持的芯片还有格式书写。\n在终端里输入 1 probe-rs chip list 可以看到，支持的芯片很多，但由于显示的问题，只显示了部分芯片型号。 所以需要进行筛选，确定具体的型号。\n注意，以下命令需要在git bash里进行，若是linux/mac则无需注意。\n在终端里输入 1 probe-rs chip list | grep STM32F4 可以看到，已经筛选出了F4系列的芯片，进一步缩小范围。\n在终端里输入 1 probe-rs chip list | grep STM32F407 可以看到，所列出的芯片型号中，STM32F407VE与我手里的STM32F407VET6就十分接近，那就选这个STM32F407VE填到.cargo/config.toml文件中--chip xxx的位置。\n当然，也可以使用\n1 probe-rs chip list | grep STM32* \u0026gt; chip.txt 将STM32系列的芯片型号，保存到一个chip.txt的文件里，再去手动查找。 在.vscode/settings.json里粘贴以下内容 1 2 3 { \u0026#34;rust-analyzer.check.allTargets\u0026#34;: false } 使用rust做嵌入式开发时，需要no-std，使用以上配置文件，就可以屏蔽报错。\n复制embassy examples里的build.rs到自己的工程里 1 2 3 4 5 fn main() { println!(\u0026#34;cargo:rustc-link-arg-bins=--nmagic\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tlink.x\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tdefmt.x\u0026#34;); } 复制必要的依赖配置到根目录里的Cargo.toml文件里 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [package] name = \u0026#34;stm32_blinky\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2024\u0026#34; [dependencies] embassy-stm32 = { version = \u0026#34;0.4.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;stm32f407ve\u0026#34;, \u0026#34;unstable-pac\u0026#34;, \u0026#34;memory-x\u0026#34;, \u0026#34;time-driver-any\u0026#34;, \u0026#34;exti\u0026#34;, \u0026#34;chrono\u0026#34;] } embassy-sync = { version = \u0026#34;0.7.2\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-executor = { version = \u0026#34;0.9.0\u0026#34;, features = [\u0026#34;arch-cortex-m\u0026#34;, \u0026#34;executor-thread\u0026#34;, \u0026#34;executor-interrupt\u0026#34;, \u0026#34;defmt\u0026#34;] } embassy-time = { version = \u0026#34;0.5.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;defmt-timestamp-uptime\u0026#34;, \u0026#34;tick-hz-32_768\u0026#34;] } embassy-usb = { version = \u0026#34;0.5.1\u0026#34;, features = [\u0026#34;defmt\u0026#34; ] } embassy-net = { version = \u0026#34;0.7.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;tcp\u0026#34;, \u0026#34;dhcpv4\u0026#34;, \u0026#34;medium-ethernet\u0026#34;, ] } embassy-net-wiznet = { version = \u0026#34;0.2.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-futures = { version = \u0026#34;0.1.2\u0026#34;} defmt = \u0026#34;1.0.1\u0026#34; defmt-rtt = \u0026#34;1.0.0\u0026#34; cortex-m = { version = \u0026#34;0.7.6\u0026#34;, features = [\u0026#34;inline-asm\u0026#34;, \u0026#34;critical-section-single-core\u0026#34;] } cortex-m-rt = \u0026#34;0.7.0\u0026#34; embedded-hal = \u0026#34;0.2.6\u0026#34; embedded-hal-bus = { version = \u0026#34;0.2\u0026#34;, features = [\u0026#34;async\u0026#34;] } embedded-io = { version = \u0026#34;0.6.0\u0026#34; } embedded-io-async = { version = \u0026#34;0.6.1\u0026#34; } panic-probe = { version = \u0026#34;1.0.0\u0026#34;, features = [\u0026#34;print-defmt\u0026#34;] } futures-util = { version = \u0026#34;0.3.30\u0026#34;, default-features = false } heapless = { version = \u0026#34;0.8\u0026#34;, default-features = false } critical-section = \u0026#34;1.1\u0026#34; nb = \u0026#34;1.0.0\u0026#34; embedded-storage = \u0026#34;0.3.1\u0026#34; micromath = \u0026#34;2.0.0\u0026#34; usbd-hid = \u0026#34;0.8.1\u0026#34; static_cell = \u0026#34;2\u0026#34; chrono = { version = \u0026#34;^0.4\u0026#34;, default-features = false} [profile.release] debug = 2 注意：以上配置，均是来自embassy仓库，只是将path字段删除了，在编译的时候，会自动在线拉取，因为我们并没有将这些库拉取到本地，所以这个字段可以删除，当然也有其他配置的方式，例如指定git，大家感兴趣可以自行去探索。\n大家可以自行对比，进行移植。最简单的方式就是复制上面的配置文件到自己的Cargo.toml文件里，再将embassy-stm32 = { version = \u0026quot;0.4.0\u0026quot;, features = [\u0026quot;defmt\u0026quot;, \u0026quot;stm32f407ve\u0026quot;, \u0026quot;unstable-pac\u0026quot;, \u0026quot;memory-x\u0026quot;, \u0026quot;time-driver-any\u0026quot;, \u0026quot;exti\u0026quot;, \u0026quot;chrono\u0026quot;] }这个依赖里的stm32f407ve修改为前文教大家适配的自己的芯片型号即可。\n编写代码点灯 完成了以上工程创建之后，就可以开始写代码点灯了。当然了，第一次，还是直接复制粘贴，局部调整即可。\n将以下代码，粘贴到main.rs里。\nCV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #![no_std] #![no_main] use defmt::*; use embassy_executor::Spawner; use embassy_stm32::gpio::{Level, Output, Speed}; use embassy_time::Timer; use {defmt_rtt as _, panic_probe as _}; #[embassy_executor::main] async fn main(_spawner: Spawner) { let p = embassy_stm32::init(Default::default()); info!(\u0026#34;Hello World!\u0026#34;); let mut led = Output::new(p.PC0, Level::High, Speed::Low); loop { info!(\u0026#34;high\u0026#34;); led.set_high(); Timer::after_millis(300).await; info!(\u0026#34;low\u0026#34;); led.set_low(); Timer::after_millis(300).await; } } 只需要将PC0修改为自己板子所连接LED的引脚即可。\n1 let mut led = Output::new(p.PC0, Level::High, Speed::Low); 烧录 确保烧录器、开发板、电脑连接无误，供电正常。\n打开终端，输入\n1 cargo run --release 开始编译，可以看到编译进度。\n编译完成后，开始下载，并且会在终端里打印出info函数里的内容。（可以用来做类似串口调试的工具。）\n至此，恭喜你完成了在STM32单片机上，使用RUST语言点灯。\n所有的伟大，源于一个勇敢的开始。😊\n","permalink":"http://localhost:1313/stm32/blinky/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"硬件接线\"\u003e硬件接线\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePeri\u003c/th\u003e\n          \u003cth\u003eSTM32\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLED\u003c/td\u003e\n          \u003ctd\u003ePC0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWDIO\u003c/td\u003e\n          \u003ctd\u003eSWDIO/PA13\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWCLK\u003c/td\u003e\n          \u003ctd\u003eSWCLk/PA14\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link GND\u003c/td\u003e\n          \u003ctd\u003eGND\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link 3V3\u003c/td\u003e\n          \u003ctd\u003e3V3\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用\u003ccode\u003eType-C/USB\u003c/code\u003e给板子\u003ccode\u003e5V\u003c/code\u003e供电，\u003ccode\u003e5V\u003c/code\u003e直流通过\u003ccode\u003eLDO\u003c/code\u003e或者\u003ccode\u003eDC/DC\u003c/code\u003e转为\u003ccode\u003e3V3\u003c/code\u003e后再给相应外设板子供电，这样会更稳定，若是部分外设需要\u003ccode\u003e5V\u003c/code\u003e供电，但系统里并未接入\u003ccode\u003e5V\u003c/code\u003e直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"创建工程\"\u003e创建工程\u003c/h1\u003e\n\u003cp\u003e一般来说，可以直接使用一些别人写好的工具来创建模板（在\u003ccode\u003ecrates.io\u003c/code\u003e上可以找到），类似\u003ccode\u003eesp-generate\u003c/code\u003e这样的工具，但是，由于\u003ccode\u003erust+embassy\u003c/code\u003e一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从\u003ccode\u003ecargo new xxx\u003c/code\u003e开始一个嵌入式\u003ccode\u003erust\u003c/code\u003e的工程。\u003c/p\u003e\n\u003ch2 id=\"创建空白工程\"\u003e创建空白工程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e创建一个空白工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e打开终端，输入：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo new stm32_blinky\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：工程名最好是\u003ccode\u003esnake_case\u003c/code\u003e。\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/00_new_project.png\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e使用\u003ccode\u003evscode\u003c/code\u003e打开所创建的工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e工程目录如下图所示，标准的\u003ccode\u003ehello world\u003c/code\u003e工程。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/01_open_project.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"移植embassy\"\u003e移植\u003ccode\u003eembassy\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e参考\u003ccode\u003eembassy\u003c/code\u003e仓库的工程进行工程移植，点击跳转\u003ca href=\"https://github.com/embassy-rs/embassy/tree/main/examples/stm32f4\"\u003e\u003ccode\u003eembassy stm32f4 examples\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在自己的工程根目录里创建两个目录，并且新建文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.config/config.toml\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.vscode/settings.json\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e将以下图中内容，复制到\u003ccode\u003e.cargo/config.toml\u003c/code\u003e里\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/02_embassy_config.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# replace STM32F407VETx with your chip as listed in `probe-rs chip list`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003erunner\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;probe-rs run --chip STM32F407VETx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;thumbv7em-none-eabihf\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eDEFMT_LOG\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;trace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（\u003ccode\u003e--chip xxx\u003c/code\u003e），还有编译器（\u003ccode\u003etarget = \u0026quot;xxx\u0026quot;\u003c/code\u003e）。\u003c/p\u003e","title":"00：点亮LED（GPIO）"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"","permalink":"http://localhost:1313/py32/ssd1306/","summary":"","title":"Ssd1306"},{"content":"使用esp-generate生成一个初始工程 进行此实验前，务必先查看基础环境搭建，完成之后，继续完成ESP32 Rust环境搭建，\n完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（Enter）。也可以先输入esp-generate，按下回车（Enter）之后，再根据提示一步一步选择。\n1 esp-generate --chip=esp32c3 esp32c3_embassy_dht11_demo 稍微解释一下，上面这行命令的作用\n1 2 3 esp3-generate # 调用该工具 --chip=esp32c3 # 传入参数，指定芯片具体名称 esp32c3_embassy_dht11_demo # 待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告 此时，命令行会打开一个类似GUI的界面，使用键盘上的“上下左右”箭头来选择相应的feature，高亮部分即代表待选中的feature，按下回车（Enter）则会选中此项feature，并且在此feature前显示✅\nfeature前带有[▶]符号，表示该feature含有多个子feature，使用箭头选中高亮，并且按下回车（Enter）后，会打开新的界面。\n此时，高亮区域选中了▶ Flashing, logging and debugging (espflash)，按下回车（Enter），来到新的界面。\n选中下图的feature，按照从上至下排序，当前选中了2和3。\n注意：1和2只能二选一，工程里编写代码时也只能二选一，否则会报错。\n完成选定后，按下ESC，返回主界面，继续开启feature。\n此时，高亮区域选中了▶ Optional editor integration，按下回车（Enter），来到新的界面。\n这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\n选定上图feature后，继续按下ESC，回到主界面。\n此时，我们已经选定了所有feature，按下S即Save，即可保存并且生成工程。终端里也会有提示信息。\n1 2 3 🆗 Rust (stable): 1.89.0 🆗 espflash: 4.0.1 🆗 probe-rs: 0.29.1 至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\n","permalink":"http://localhost:1313/esp32/esp-generate-template/","summary":"\u003ch1 id=\"使用esp-generate生成一个初始工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成一个初始工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e进行此实验前，务必先查看\u003ca href=\"/toolchain/stm32-dev-env-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e基础环境搭建\u003c/a\u003e，完成之后，继续完成\u003ca href=\"/toolchain/esp32-dev-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003eESP32 Rust环境搭建\u003c/a\u003e，\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）。也可以先输入\u003ccode\u003eesp-generate\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）之后，再根据提示一步一步选择。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp-generate --chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3 esp32c3_embassy_dht11_demo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e稍微解释一下，上面这行命令的作用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp3-generate \u003cspan class=\"c1\"\u003e# 调用该工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e--chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3  \u003cspan class=\"c1\"\u003e# 传入参数，指定芯片具体名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp32c3_embassy_dht11_demo  \u003cspan class=\"c1\"\u003e#   待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e此时，命令行会打开一个类似\u003ccode\u003eGUI\u003c/code\u003e的界面，使用键盘上的“上下左右”箭头来选择相应的\u003ccode\u003efeature\u003c/code\u003e，高亮部分即代表待选中的\u003ccode\u003efeature\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）则会选中此项\u003ccode\u003efeature\u003c/code\u003e，并且在此\u003ccode\u003efeature\u003c/code\u003e前显示\u003cspan style=\"color: green;\"\u003e✅\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-00.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efeature\u003c/code\u003e前带有\u003cspan style=\"color: gray;\"\u003e[▶]\u003c/span\u003e符号，表示该\u003ccode\u003efeature\u003c/code\u003e含有多个子\u003ccode\u003efeature\u003c/code\u003e，使用箭头选中高亮，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）后，会打开新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-01.png\"\u003e\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Flashing, logging and debugging (espflash)\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-02.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选中下图的\u003ccode\u003efeature\u003c/code\u003e，按照从上至下排序，当前选中了\u003ccode\u003e2\u003c/code\u003e和\u003ccode\u003e3\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-03.png\"\u003e\u003c/p\u003e\n\u003cp\u003e注意：\u003ccode\u003e1\u003c/code\u003e和\u003ccode\u003e2\u003c/code\u003e只能二选一，工程里编写代码时也只能二选一，否则会报错。\u003c/p\u003e\n\u003cp\u003e完成选定后，按下\u003ccode\u003eESC\u003c/code\u003e，返回主界面，继续开启\u003ccode\u003efeature\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Optional editor integration\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-04.png\"\u003e\u003c/p\u003e\n\u003cp\u003e这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-05.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选定上图\u003ccode\u003efeature\u003c/code\u003e后，继续按下\u003ccode\u003eESC\u003c/code\u003e，回到主界面。\u003c/p\u003e\n\u003cp\u003e此时，我们已经选定了所有\u003ccode\u003efeature\u003c/code\u003e，按下\u003ccode\u003eS\u003c/code\u003e即\u003ccode\u003eSave\u003c/code\u003e，即可保存并且生成工程。终端里也会有提示信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-06.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 Rust \u003cspan class=\"o\"\u003e(\u003c/span\u003estable\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 1.89.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 espflash: 4.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 probe-rs: 0.29.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\u003c/p\u003e","title":"配置ESP32模板工程，此后的所有工程均可按此流程配置"},{"content":"前言和实验结果 跳过Hello World，即点亮LED，直接实战读取DHT11温湿度传感器。\n最后实现的效果如下。\n如上图，可以在终端Terminal里直接看到DHT11测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\n使用esp-generate生成模板工程 由于过程具有重复性，故不再重复演示，请点击跳转使用esp-generate生成一个ESP32初始工程\n打开工程 导入需要用到的crate，在工程根目录下打开终端，输入以下命令，并按下回车（Enter） 1 cargo add esp32-dht11-rs 在main.rs里输入以下代码\n在头部的位置，先引入需要使用的crate 1 2 use esp32_dht11_rs::{DHT11}; use esp_hal::delay::Delay; 接着，来到main函数里 1 2 3 let delay = Delay::new(); let mut dht11 = DHT11::new(peripherals.GPIO0, delay); let mut dht11_read_counter = 1; 再将以下内容复制到loop函数里 1 2 3 4 5 6 match dht11.read() { Ok(m) =\u0026gt; println!(\u0026#34;DHT11 TEMP is: {}℃ DHT11 HUMI is:{}% measuring for [NO.{:?}] time\u0026#34;, m.temperature, m.humidity, dht11_read_counter), Err(error) =\u0026gt; println!(\u0026#34;error occured: {:?}\u0026#34;, error), } Timer::after_millis(2000).await; dht11_read_counter += 1; 断电前提下，连接硬件\n功能 DHT11 ESP32C3 电源正极 VCC 3V3 地线 GND GND 数据线 D / DAT GPIO0 / 引脚 0 连接好硬件之后，将开发板连接到电脑，回到终端，输入以下命令\n需要自行安装CH34x的驱动，这一步不做说明，自行安装即可。\n1 cargo run --release 可以看到终端里在进行编译compiling。\n完成之后，会自动进行烧录，期间不需要按开发板上的任何按键（试过很多板子，都不需要按BOOT）。\n烧录完成后，正常在终端里打印信息，若是用手握住DHT11模块，湿度会瞬间上升，温度也会开始缓慢上升（假定你手现在并没有进行过冷冻处理，是正常体温。），说明模块工作正常，程序正常运行。\n","permalink":"http://localhost:1313/esp32/esp32c3_dht11/","summary":"\u003ch1 id=\"前言和实验结果\"\u003e前言和实验结果\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e跳过\u003ccode\u003eHello World\u003c/code\u003e，即点亮\u003ccode\u003eLED\u003c/code\u003e，直接实战读取\u003ccode\u003eDHT11\u003c/code\u003e温湿度传感器。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e最后实现的效果如下。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/esp32c3/dht11/dht11-measuring-result.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如上图，可以在终端\u003ccode\u003eTerminal\u003c/code\u003e里直接看到\u003ccode\u003eDHT11\u003c/code\u003e测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"使用esp-generate生成模板工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成模板工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由于过程具有重复性，故不再重复演示，请点击跳转\u003ca href=\"/esp32/esp-generate-template/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e使用esp-generate生成一个ESP32初始工程\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"打开工程\"\u003e打开工程\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e导入需要用到的\u003ccode\u003ecrate\u003c/code\u003e，在工程根目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecargo\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ers\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在\u003ccode\u003emain.rs\u003c/code\u003e里输入以下代码\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在头部的位置，先引入需要使用的\u003ccode\u003ecrate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32_dht11_rs\u003c/span\u003e::\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp_hal\u003c/span\u003e::\u003cspan class=\"n\"\u003edelay\u003c/span\u003e::\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接着，来到\u003ccode\u003emain\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperipherals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"no\"\u003eGPIO0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e再将以下内容复制到\u003ccode\u003eloop\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DHT11 TEMP is: \u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e℃ DHT11 HUMI is:\u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e% measuring for [NO.\u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e] time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etemperature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehumidity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;error occured: \u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eTimer\u003c/span\u003e::\u003cspan class=\"n\"\u003eafter_millis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"k\"\u003eawait\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e断电前提下，连接硬件\u003c/p\u003e","title":"ESP32C3读取DHT11温湿度信息"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟，搭建ESP32 Rust开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 综上，搭建了一个基础的Rust嵌入式开发环境，之后的教程主要使用STM32, ESP32, RP2040 Pico, RP2350 Pico2等MCU进行演示。\n至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链\n打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community\n打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n视频版本，可以点击跳转到Bilibili观看 视频录制的时间可能有些早，但是内容完全一样，若是视频无法复现，可以先按照博客的图文进行操作，若还是失败，可以在视频平台给我私信。\n","permalink":"http://localhost:1313/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e综上，搭建了一个基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式开发环境，之后的教程主要使用\u003ccode\u003eSTM32\u003c/code\u003e, \u003ccode\u003eESP32\u003c/code\u003e, \u003ccode\u003eRP2040 Pico, RP2350 Pico2\u003c/code\u003e等\u003ccode\u003eMCU\u003c/code\u003e进行演示。\u003c/p\u003e","title":"五分钟，搭建Rust嵌入式开发环境"},{"content":"","permalink":"http://localhost:1313/rp/blinky/","summary":"","title":"Blinky"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 硬件接线 Peri STM32 LED PC0 ST-Link SWDIO SWDIO/PA13 ST-Link SWCLK SWCLk/PA14 ST-Link GND GND ST-Link 3V3 3V3 电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用Type-C/USB给板子5V供电，5V直流通过LDO或者DC/DC转为3V3后再给相应外设板子供电，这样会更稳定，若是部分外设需要5V供电，但系统里并未接入5V直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\n创建工程 一般来说，可以直接使用一些别人写好的工具来创建模板（在crates.io上可以找到），类似esp-generate这样的工具，但是，由于rust+embassy一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从cargo new xxx开始一个嵌入式rust的工程。\n创建空白工程 创建一个空白工程 打开终端，输入：\n1 cargo new stm32_blinky 注意：工程名最好是snake_case。 使用vscode打开所创建的工程 工程目录如下图所示，标准的hello world工程。\n移植embassy 参考embassy仓库的工程进行工程移植，点击跳转embassy stm32f4 examples\n在自己的工程根目录里创建两个目录，并且新建文件\n1 2 .config/config.toml .vscode/settings.json 将以下图中内容，复制到.cargo/config.toml里 1 2 3 4 5 6 7 8 9 [target.\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;] # replace STM32F407VETx with your chip as listed in `probe-rs chip list` runner = \u0026#34;probe-rs run --chip STM32F407VETx\u0026#34; [build] target = \u0026#34;thumbv7em-none-eabihf\u0026#34; [env] DEFMT_LOG = \u0026#34;trace\u0026#34; 注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（--chip xxx），还有编译器（target = \u0026quot;xxx\u0026quot;）。\n具体做法是：\n先看自己的开发板是什么型号，例如，我手里的是STM32F407VET6，这个型号在购买开发板的时候可以看到，也可以在芯片上直接读到，由于不确定配置文件里的芯片名称格式，所以需要使用probe-rs提供的命令来查看支持的芯片还有格式书写。\n在终端里输入 1 probe-rs chip list 可以看到，支持的芯片很多，但由于显示的问题，只显示了部分芯片型号。 所以需要进行筛选，确定具体的型号。\n注意，以下命令需要在git bash里进行，若是linux/mac则无需注意。\n在终端里输入 1 probe-rs chip list | grep STM32F4 可以看到，已经筛选出了F4系列的芯片，进一步缩小范围。\n在终端里输入 1 probe-rs chip list | grep STM32F407 可以看到，所列出的芯片型号中，STM32F407VE与我手里的STM32F407VET6就十分接近，那就选这个STM32F407VE填到.cargo/config.toml文件中--chip xxx的位置。\n当然，也可以使用\n1 probe-rs chip list | grep STM32* \u0026gt; chip.txt 将STM32系列的芯片型号，保存到一个chip.txt的文件里，再去手动查找。 在.vscode/settings.json里粘贴以下内容 1 2 3 { \u0026#34;rust-analyzer.check.allTargets\u0026#34;: false } 使用rust做嵌入式开发时，需要no-std，使用以上配置文件，就可以屏蔽报错。\n复制embassy examples里的build.rs到自己的工程里 1 2 3 4 5 fn main() { println!(\u0026#34;cargo:rustc-link-arg-bins=--nmagic\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tlink.x\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tdefmt.x\u0026#34;); } 复制必要的依赖配置到根目录里的Cargo.toml文件里 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [package] name = \u0026#34;stm32_blinky\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2024\u0026#34; [dependencies] embassy-stm32 = { version = \u0026#34;0.4.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;stm32f407ve\u0026#34;, \u0026#34;unstable-pac\u0026#34;, \u0026#34;memory-x\u0026#34;, \u0026#34;time-driver-any\u0026#34;, \u0026#34;exti\u0026#34;, \u0026#34;chrono\u0026#34;] } embassy-sync = { version = \u0026#34;0.7.2\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-executor = { version = \u0026#34;0.9.0\u0026#34;, features = [\u0026#34;arch-cortex-m\u0026#34;, \u0026#34;executor-thread\u0026#34;, \u0026#34;executor-interrupt\u0026#34;, \u0026#34;defmt\u0026#34;] } embassy-time = { version = \u0026#34;0.5.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;defmt-timestamp-uptime\u0026#34;, \u0026#34;tick-hz-32_768\u0026#34;] } embassy-usb = { version = \u0026#34;0.5.1\u0026#34;, features = [\u0026#34;defmt\u0026#34; ] } embassy-net = { version = \u0026#34;0.7.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;tcp\u0026#34;, \u0026#34;dhcpv4\u0026#34;, \u0026#34;medium-ethernet\u0026#34;, ] } embassy-net-wiznet = { version = \u0026#34;0.2.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-futures = { version = \u0026#34;0.1.2\u0026#34;} defmt = \u0026#34;1.0.1\u0026#34; defmt-rtt = \u0026#34;1.0.0\u0026#34; cortex-m = { version = \u0026#34;0.7.6\u0026#34;, features = [\u0026#34;inline-asm\u0026#34;, \u0026#34;critical-section-single-core\u0026#34;] } cortex-m-rt = \u0026#34;0.7.0\u0026#34; embedded-hal = \u0026#34;0.2.6\u0026#34; embedded-hal-bus = { version = \u0026#34;0.2\u0026#34;, features = [\u0026#34;async\u0026#34;] } embedded-io = { version = \u0026#34;0.6.0\u0026#34; } embedded-io-async = { version = \u0026#34;0.6.1\u0026#34; } panic-probe = { version = \u0026#34;1.0.0\u0026#34;, features = [\u0026#34;print-defmt\u0026#34;] } futures-util = { version = \u0026#34;0.3.30\u0026#34;, default-features = false } heapless = { version = \u0026#34;0.8\u0026#34;, default-features = false } critical-section = \u0026#34;1.1\u0026#34; nb = \u0026#34;1.0.0\u0026#34; embedded-storage = \u0026#34;0.3.1\u0026#34; micromath = \u0026#34;2.0.0\u0026#34; usbd-hid = \u0026#34;0.8.1\u0026#34; static_cell = \u0026#34;2\u0026#34; chrono = { version = \u0026#34;^0.4\u0026#34;, default-features = false} [profile.release] debug = 2 注意：以上配置，均是来自embassy仓库，只是将path字段删除了，在编译的时候，会自动在线拉取，因为我们并没有将这些库拉取到本地，所以这个字段可以删除，当然也有其他配置的方式，例如指定git，大家感兴趣可以自行去探索。\n大家可以自行对比，进行移植。最简单的方式就是复制上面的配置文件到自己的Cargo.toml文件里，再将embassy-stm32 = { version = \u0026quot;0.4.0\u0026quot;, features = [\u0026quot;defmt\u0026quot;, \u0026quot;stm32f407ve\u0026quot;, \u0026quot;unstable-pac\u0026quot;, \u0026quot;memory-x\u0026quot;, \u0026quot;time-driver-any\u0026quot;, \u0026quot;exti\u0026quot;, \u0026quot;chrono\u0026quot;] }这个依赖里的stm32f407ve修改为前文教大家适配的自己的芯片型号即可。\n编写代码点灯 完成了以上工程创建之后，就可以开始写代码点灯了。当然了，第一次，还是直接复制粘贴，局部调整即可。\n将以下代码，粘贴到main.rs里。\nCV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #![no_std] #![no_main] use defmt::*; use embassy_executor::Spawner; use embassy_stm32::gpio::{Level, Output, Speed}; use embassy_time::Timer; use {defmt_rtt as _, panic_probe as _}; #[embassy_executor::main] async fn main(_spawner: Spawner) { let p = embassy_stm32::init(Default::default()); info!(\u0026#34;Hello World!\u0026#34;); let mut led = Output::new(p.PC0, Level::High, Speed::Low); loop { info!(\u0026#34;high\u0026#34;); led.set_high(); Timer::after_millis(300).await; info!(\u0026#34;low\u0026#34;); led.set_low(); Timer::after_millis(300).await; } } 只需要将PC0修改为自己板子所连接LED的引脚即可。\n1 let mut led = Output::new(p.PC0, Level::High, Speed::Low); 烧录 确保烧录器、开发板、电脑连接无误，供电正常。\n打开终端，输入\n1 cargo run --release 开始编译，可以看到编译进度。\n编译完成后，开始下载，并且会在终端里打印出info函数里的内容。（可以用来做类似串口调试的工具。）\n至此，恭喜你完成了在STM32单片机上，使用RUST语言点灯。\n所有的伟大，源于一个勇敢的开始。😊\n","permalink":"http://localhost:1313/stm32/blinky/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"硬件接线\"\u003e硬件接线\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePeri\u003c/th\u003e\n          \u003cth\u003eSTM32\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLED\u003c/td\u003e\n          \u003ctd\u003ePC0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWDIO\u003c/td\u003e\n          \u003ctd\u003eSWDIO/PA13\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWCLK\u003c/td\u003e\n          \u003ctd\u003eSWCLk/PA14\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link GND\u003c/td\u003e\n          \u003ctd\u003eGND\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link 3V3\u003c/td\u003e\n          \u003ctd\u003e3V3\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用\u003ccode\u003eType-C/USB\u003c/code\u003e给板子\u003ccode\u003e5V\u003c/code\u003e供电，\u003ccode\u003e5V\u003c/code\u003e直流通过\u003ccode\u003eLDO\u003c/code\u003e或者\u003ccode\u003eDC/DC\u003c/code\u003e转为\u003ccode\u003e3V3\u003c/code\u003e后再给相应外设板子供电，这样会更稳定，若是部分外设需要\u003ccode\u003e5V\u003c/code\u003e供电，但系统里并未接入\u003ccode\u003e5V\u003c/code\u003e直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"创建工程\"\u003e创建工程\u003c/h1\u003e\n\u003cp\u003e一般来说，可以直接使用一些别人写好的工具来创建模板（在\u003ccode\u003ecrates.io\u003c/code\u003e上可以找到），类似\u003ccode\u003eesp-generate\u003c/code\u003e这样的工具，但是，由于\u003ccode\u003erust+embassy\u003c/code\u003e一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从\u003ccode\u003ecargo new xxx\u003c/code\u003e开始一个嵌入式\u003ccode\u003erust\u003c/code\u003e的工程。\u003c/p\u003e\n\u003ch2 id=\"创建空白工程\"\u003e创建空白工程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e创建一个空白工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e打开终端，输入：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo new stm32_blinky\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：工程名最好是\u003ccode\u003esnake_case\u003c/code\u003e。\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/00_new_project.png\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e使用\u003ccode\u003evscode\u003c/code\u003e打开所创建的工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e工程目录如下图所示，标准的\u003ccode\u003ehello world\u003c/code\u003e工程。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/01_open_project.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"移植embassy\"\u003e移植\u003ccode\u003eembassy\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e参考\u003ccode\u003eembassy\u003c/code\u003e仓库的工程进行工程移植，点击跳转\u003ca href=\"https://github.com/embassy-rs/embassy/tree/main/examples/stm32f4\"\u003e\u003ccode\u003eembassy stm32f4 examples\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在自己的工程根目录里创建两个目录，并且新建文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.config/config.toml\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.vscode/settings.json\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e将以下图中内容，复制到\u003ccode\u003e.cargo/config.toml\u003c/code\u003e里\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/02_embassy_config.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# replace STM32F407VETx with your chip as listed in `probe-rs chip list`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003erunner\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;probe-rs run --chip STM32F407VETx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;thumbv7em-none-eabihf\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eDEFMT_LOG\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;trace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（\u003ccode\u003e--chip xxx\u003c/code\u003e），还有编译器（\u003ccode\u003etarget = \u0026quot;xxx\u0026quot;\u003c/code\u003e）。\u003c/p\u003e","title":"00：点亮LED（GPIO）"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"","permalink":"http://localhost:1313/py32/ssd1306/","summary":"","title":"Ssd1306"},{"content":"使用esp-generate生成一个初始工程 进行此实验前，务必先查看基础环境搭建，完成之后，继续完成ESP32 Rust环境搭建，\n完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（Enter）。也可以先输入esp-generate，按下回车（Enter）之后，再根据提示一步一步选择。\n1 esp-generate --chip=esp32c3 esp32c3_embassy_dht11_demo 稍微解释一下，上面这行命令的作用\n1 2 3 esp3-generate # 调用该工具 --chip=esp32c3 # 传入参数，指定芯片具体名称 esp32c3_embassy_dht11_demo # 待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告 此时，命令行会打开一个类似GUI的界面，使用键盘上的“上下左右”箭头来选择相应的feature，高亮部分即代表待选中的feature，按下回车（Enter）则会选中此项feature，并且在此feature前显示✅\nfeature前带有[▶]符号，表示该feature含有多个子feature，使用箭头选中高亮，并且按下回车（Enter）后，会打开新的界面。\n此时，高亮区域选中了▶ Flashing, logging and debugging (espflash)，按下回车（Enter），来到新的界面。\n选中下图的feature，按照从上至下排序，当前选中了2和3。\n注意：1和2只能二选一，工程里编写代码时也只能二选一，否则会报错。\n完成选定后，按下ESC，返回主界面，继续开启feature。\n此时，高亮区域选中了▶ Optional editor integration，按下回车（Enter），来到新的界面。\n这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\n选定上图feature后，继续按下ESC，回到主界面。\n此时，我们已经选定了所有feature，按下S即Save，即可保存并且生成工程。终端里也会有提示信息。\n1 2 3 🆗 Rust (stable): 1.89.0 🆗 espflash: 4.0.1 🆗 probe-rs: 0.29.1 至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\n","permalink":"http://localhost:1313/esp32/esp-generate-template/","summary":"\u003ch1 id=\"使用esp-generate生成一个初始工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成一个初始工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e进行此实验前，务必先查看\u003ca href=\"/toolchain/stm32-dev-env-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e基础环境搭建\u003c/a\u003e，完成之后，继续完成\u003ca href=\"/toolchain/esp32-dev-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003eESP32 Rust环境搭建\u003c/a\u003e，\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）。也可以先输入\u003ccode\u003eesp-generate\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）之后，再根据提示一步一步选择。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp-generate --chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3 esp32c3_embassy_dht11_demo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e稍微解释一下，上面这行命令的作用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp3-generate \u003cspan class=\"c1\"\u003e# 调用该工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e--chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3  \u003cspan class=\"c1\"\u003e# 传入参数，指定芯片具体名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp32c3_embassy_dht11_demo  \u003cspan class=\"c1\"\u003e#   待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e此时，命令行会打开一个类似\u003ccode\u003eGUI\u003c/code\u003e的界面，使用键盘上的“上下左右”箭头来选择相应的\u003ccode\u003efeature\u003c/code\u003e，高亮部分即代表待选中的\u003ccode\u003efeature\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）则会选中此项\u003ccode\u003efeature\u003c/code\u003e，并且在此\u003ccode\u003efeature\u003c/code\u003e前显示\u003cspan style=\"color: green;\"\u003e✅\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-00.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efeature\u003c/code\u003e前带有\u003cspan style=\"color: gray;\"\u003e[▶]\u003c/span\u003e符号，表示该\u003ccode\u003efeature\u003c/code\u003e含有多个子\u003ccode\u003efeature\u003c/code\u003e，使用箭头选中高亮，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）后，会打开新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-01.png\"\u003e\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Flashing, logging and debugging (espflash)\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-02.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选中下图的\u003ccode\u003efeature\u003c/code\u003e，按照从上至下排序，当前选中了\u003ccode\u003e2\u003c/code\u003e和\u003ccode\u003e3\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-03.png\"\u003e\u003c/p\u003e\n\u003cp\u003e注意：\u003ccode\u003e1\u003c/code\u003e和\u003ccode\u003e2\u003c/code\u003e只能二选一，工程里编写代码时也只能二选一，否则会报错。\u003c/p\u003e\n\u003cp\u003e完成选定后，按下\u003ccode\u003eESC\u003c/code\u003e，返回主界面，继续开启\u003ccode\u003efeature\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Optional editor integration\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-04.png\"\u003e\u003c/p\u003e\n\u003cp\u003e这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-05.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选定上图\u003ccode\u003efeature\u003c/code\u003e后，继续按下\u003ccode\u003eESC\u003c/code\u003e，回到主界面。\u003c/p\u003e\n\u003cp\u003e此时，我们已经选定了所有\u003ccode\u003efeature\u003c/code\u003e，按下\u003ccode\u003eS\u003c/code\u003e即\u003ccode\u003eSave\u003c/code\u003e，即可保存并且生成工程。终端里也会有提示信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-06.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 Rust \u003cspan class=\"o\"\u003e(\u003c/span\u003estable\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 1.89.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 espflash: 4.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 probe-rs: 0.29.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\u003c/p\u003e","title":"配置ESP32模板工程，此后的所有工程均可按此流程配置"},{"content":"前言和实验结果 跳过Hello World，即点亮LED，直接实战读取DHT11温湿度传感器。\n最后实现的效果如下。\n如上图，可以在终端Terminal里直接看到DHT11测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\n使用esp-generate生成模板工程 由于过程具有重复性，故不再重复演示，请点击跳转使用esp-generate生成一个ESP32初始工程\n打开工程 导入需要用到的crate，在工程根目录下打开终端，输入以下命令，并按下回车（Enter） 1 cargo add esp32-dht11-rs 在main.rs里输入以下代码\n在头部的位置，先引入需要使用的crate 1 2 use esp32_dht11_rs::{DHT11}; use esp_hal::delay::Delay; 接着，来到main函数里 1 2 3 let delay = Delay::new(); let mut dht11 = DHT11::new(peripherals.GPIO0, delay); let mut dht11_read_counter = 1; 再将以下内容复制到loop函数里 1 2 3 4 5 6 match dht11.read() { Ok(m) =\u0026gt; println!(\u0026#34;DHT11 TEMP is: {}℃ DHT11 HUMI is:{}% measuring for [NO.{:?}] time\u0026#34;, m.temperature, m.humidity, dht11_read_counter), Err(error) =\u0026gt; println!(\u0026#34;error occured: {:?}\u0026#34;, error), } Timer::after_millis(2000).await; dht11_read_counter += 1; 断电前提下，连接硬件\n功能 DHT11 ESP32C3 电源正极 VCC 3V3 地线 GND GND 数据线 D / DAT GPIO0 / 引脚 0 连接好硬件之后，将开发板连接到电脑，回到终端，输入以下命令\n需要自行安装CH34x的驱动，这一步不做说明，自行安装即可。\n1 cargo run --release 可以看到终端里在进行编译compiling。\n完成之后，会自动进行烧录，期间不需要按开发板上的任何按键（试过很多板子，都不需要按BOOT）。\n烧录完成后，正常在终端里打印信息，若是用手握住DHT11模块，湿度会瞬间上升，温度也会开始缓慢上升（假定你手现在并没有进行过冷冻处理，是正常体温。），说明模块工作正常，程序正常运行。\n","permalink":"http://localhost:1313/esp32/esp32c3_dht11/","summary":"\u003ch1 id=\"前言和实验结果\"\u003e前言和实验结果\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e跳过\u003ccode\u003eHello World\u003c/code\u003e，即点亮\u003ccode\u003eLED\u003c/code\u003e，直接实战读取\u003ccode\u003eDHT11\u003c/code\u003e温湿度传感器。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e最后实现的效果如下。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/esp32c3/dht11/dht11-measuring-result.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如上图，可以在终端\u003ccode\u003eTerminal\u003c/code\u003e里直接看到\u003ccode\u003eDHT11\u003c/code\u003e测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"使用esp-generate生成模板工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成模板工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由于过程具有重复性，故不再重复演示，请点击跳转\u003ca href=\"/esp32/esp-generate-template/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e使用esp-generate生成一个ESP32初始工程\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"打开工程\"\u003e打开工程\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e导入需要用到的\u003ccode\u003ecrate\u003c/code\u003e，在工程根目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecargo\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ers\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在\u003ccode\u003emain.rs\u003c/code\u003e里输入以下代码\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在头部的位置，先引入需要使用的\u003ccode\u003ecrate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32_dht11_rs\u003c/span\u003e::\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp_hal\u003c/span\u003e::\u003cspan class=\"n\"\u003edelay\u003c/span\u003e::\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接着，来到\u003ccode\u003emain\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperipherals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"no\"\u003eGPIO0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e再将以下内容复制到\u003ccode\u003eloop\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DHT11 TEMP is: \u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e℃ DHT11 HUMI is:\u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e% measuring for [NO.\u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e] time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etemperature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehumidity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;error occured: \u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eTimer\u003c/span\u003e::\u003cspan class=\"n\"\u003eafter_millis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"k\"\u003eawait\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e断电前提下，连接硬件\u003c/p\u003e","title":"ESP32C3读取DHT11温湿度信息"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟，搭建ESP32 Rust开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 综上，搭建了一个基础的Rust嵌入式开发环境，之后的教程主要使用STM32, ESP32, RP2040 Pico, RP2350 Pico2等MCU进行演示。\n至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链\n打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community\n打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n视频版本，可以点击跳转到Bilibili观看 视频录制的时间可能有些早，但是内容完全一样，若是视频无法复现，可以先按照博客的图文进行操作，若还是失败，可以在视频平台给我私信。\n","permalink":"http://localhost:1313/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e综上，搭建了一个基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式开发环境，之后的教程主要使用\u003ccode\u003eSTM32\u003c/code\u003e, \u003ccode\u003eESP32\u003c/code\u003e, \u003ccode\u003eRP2040 Pico, RP2350 Pico2\u003c/code\u003e等\u003ccode\u003eMCU\u003c/code\u003e进行演示。\u003c/p\u003e","title":"五分钟，搭建Rust嵌入式开发环境"},{"content":" ","permalink":"http://localhost:1313/rp/blinky/","summary":"\u003chr\u003e","title":"Blinky"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 硬件接线 Peri STM32 LED PC0 ST-Link SWDIO SWDIO/PA13 ST-Link SWCLK SWCLk/PA14 ST-Link GND GND ST-Link 3V3 3V3 电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用Type-C/USB给板子5V供电，5V直流通过LDO或者DC/DC转为3V3后再给相应外设板子供电，这样会更稳定，若是部分外设需要5V供电，但系统里并未接入5V直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\n创建工程 一般来说，可以直接使用一些别人写好的工具来创建模板（在crates.io上可以找到），类似esp-generate这样的工具，但是，由于rust+embassy一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从cargo new xxx开始一个嵌入式rust的工程。\n创建空白工程 创建一个空白工程 打开终端，输入：\n1 cargo new stm32_blinky 注意：工程名最好是snake_case。 使用vscode打开所创建的工程 工程目录如下图所示，标准的hello world工程。\n移植embassy 参考embassy仓库的工程进行工程移植，点击跳转embassy stm32f4 examples\n在自己的工程根目录里创建两个目录，并且新建文件\n1 2 .config/config.toml .vscode/settings.json 将以下图中内容，复制到.cargo/config.toml里 1 2 3 4 5 6 7 8 9 [target.\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;] # replace STM32F407VETx with your chip as listed in `probe-rs chip list` runner = \u0026#34;probe-rs run --chip STM32F407VETx\u0026#34; [build] target = \u0026#34;thumbv7em-none-eabihf\u0026#34; [env] DEFMT_LOG = \u0026#34;trace\u0026#34; 注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（--chip xxx），还有编译器（target = \u0026quot;xxx\u0026quot;）。\n具体做法是：\n先看自己的开发板是什么型号，例如，我手里的是STM32F407VET6，这个型号在购买开发板的时候可以看到，也可以在芯片上直接读到，由于不确定配置文件里的芯片名称格式，所以需要使用probe-rs提供的命令来查看支持的芯片还有格式书写。\n在终端里输入 1 probe-rs chip list 可以看到，支持的芯片很多，但由于显示的问题，只显示了部分芯片型号。 所以需要进行筛选，确定具体的型号。\n注意，以下命令需要在git bash里进行，若是linux/mac则无需注意。\n在终端里输入 1 probe-rs chip list | grep STM32F4 可以看到，已经筛选出了F4系列的芯片，进一步缩小范围。\n在终端里输入 1 probe-rs chip list | grep STM32F407 可以看到，所列出的芯片型号中，STM32F407VE与我手里的STM32F407VET6就十分接近，那就选这个STM32F407VE填到.cargo/config.toml文件中--chip xxx的位置。\n当然，也可以使用\n1 probe-rs chip list | grep STM32* \u0026gt; chip.txt 将STM32系列的芯片型号，保存到一个chip.txt的文件里，再去手动查找。 在.vscode/settings.json里粘贴以下内容 1 2 3 { \u0026#34;rust-analyzer.check.allTargets\u0026#34;: false } 使用rust做嵌入式开发时，需要no-std，使用以上配置文件，就可以屏蔽报错。\n复制embassy examples里的build.rs到自己的工程里 1 2 3 4 5 fn main() { println!(\u0026#34;cargo:rustc-link-arg-bins=--nmagic\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tlink.x\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tdefmt.x\u0026#34;); } 复制必要的依赖配置到根目录里的Cargo.toml文件里 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [package] name = \u0026#34;stm32_blinky\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2024\u0026#34; [dependencies] embassy-stm32 = { version = \u0026#34;0.4.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;stm32f407ve\u0026#34;, \u0026#34;unstable-pac\u0026#34;, \u0026#34;memory-x\u0026#34;, \u0026#34;time-driver-any\u0026#34;, \u0026#34;exti\u0026#34;, \u0026#34;chrono\u0026#34;] } embassy-sync = { version = \u0026#34;0.7.2\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-executor = { version = \u0026#34;0.9.0\u0026#34;, features = [\u0026#34;arch-cortex-m\u0026#34;, \u0026#34;executor-thread\u0026#34;, \u0026#34;executor-interrupt\u0026#34;, \u0026#34;defmt\u0026#34;] } embassy-time = { version = \u0026#34;0.5.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;defmt-timestamp-uptime\u0026#34;, \u0026#34;tick-hz-32_768\u0026#34;] } embassy-usb = { version = \u0026#34;0.5.1\u0026#34;, features = [\u0026#34;defmt\u0026#34; ] } embassy-net = { version = \u0026#34;0.7.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;tcp\u0026#34;, \u0026#34;dhcpv4\u0026#34;, \u0026#34;medium-ethernet\u0026#34;, ] } embassy-net-wiznet = { version = \u0026#34;0.2.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-futures = { version = \u0026#34;0.1.2\u0026#34;} defmt = \u0026#34;1.0.1\u0026#34; defmt-rtt = \u0026#34;1.0.0\u0026#34; cortex-m = { version = \u0026#34;0.7.6\u0026#34;, features = [\u0026#34;inline-asm\u0026#34;, \u0026#34;critical-section-single-core\u0026#34;] } cortex-m-rt = \u0026#34;0.7.0\u0026#34; embedded-hal = \u0026#34;0.2.6\u0026#34; embedded-hal-bus = { version = \u0026#34;0.2\u0026#34;, features = [\u0026#34;async\u0026#34;] } embedded-io = { version = \u0026#34;0.6.0\u0026#34; } embedded-io-async = { version = \u0026#34;0.6.1\u0026#34; } panic-probe = { version = \u0026#34;1.0.0\u0026#34;, features = [\u0026#34;print-defmt\u0026#34;] } futures-util = { version = \u0026#34;0.3.30\u0026#34;, default-features = false } heapless = { version = \u0026#34;0.8\u0026#34;, default-features = false } critical-section = \u0026#34;1.1\u0026#34; nb = \u0026#34;1.0.0\u0026#34; embedded-storage = \u0026#34;0.3.1\u0026#34; micromath = \u0026#34;2.0.0\u0026#34; usbd-hid = \u0026#34;0.8.1\u0026#34; static_cell = \u0026#34;2\u0026#34; chrono = { version = \u0026#34;^0.4\u0026#34;, default-features = false} [profile.release] debug = 2 注意：以上配置，均是来自embassy仓库，只是将path字段删除了，在编译的时候，会自动在线拉取，因为我们并没有将这些库拉取到本地，所以这个字段可以删除，当然也有其他配置的方式，例如指定git，大家感兴趣可以自行去探索。\n大家可以自行对比，进行移植。最简单的方式就是复制上面的配置文件到自己的Cargo.toml文件里，再将embassy-stm32 = { version = \u0026quot;0.4.0\u0026quot;, features = [\u0026quot;defmt\u0026quot;, \u0026quot;stm32f407ve\u0026quot;, \u0026quot;unstable-pac\u0026quot;, \u0026quot;memory-x\u0026quot;, \u0026quot;time-driver-any\u0026quot;, \u0026quot;exti\u0026quot;, \u0026quot;chrono\u0026quot;] }这个依赖里的stm32f407ve修改为前文教大家适配的自己的芯片型号即可。\n编写代码点灯 完成了以上工程创建之后，就可以开始写代码点灯了。当然了，第一次，还是直接复制粘贴，局部调整即可。\n将以下代码，粘贴到main.rs里。\nCV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #![no_std] #![no_main] use defmt::*; use embassy_executor::Spawner; use embassy_stm32::gpio::{Level, Output, Speed}; use embassy_time::Timer; use {defmt_rtt as _, panic_probe as _}; #[embassy_executor::main] async fn main(_spawner: Spawner) { let p = embassy_stm32::init(Default::default()); info!(\u0026#34;Hello World!\u0026#34;); let mut led = Output::new(p.PC0, Level::High, Speed::Low); loop { info!(\u0026#34;high\u0026#34;); led.set_high(); Timer::after_millis(300).await; info!(\u0026#34;low\u0026#34;); led.set_low(); Timer::after_millis(300).await; } } 只需要将PC0修改为自己板子所连接LED的引脚即可。\n1 let mut led = Output::new(p.PC0, Level::High, Speed::Low); 烧录 确保烧录器、开发板、电脑连接无误，供电正常。\n打开终端，输入\n1 cargo run --release 开始编译，可以看到编译进度。\n编译完成后，开始下载，并且会在终端里打印出info函数里的内容。（可以用来做类似串口调试的工具。）\n至此，恭喜你完成了在STM32单片机上，使用RUST语言点灯。\n所有的伟大，源于一个勇敢的开始。😊\n","permalink":"http://localhost:1313/stm32/blinky/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"硬件接线\"\u003e硬件接线\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePeri\u003c/th\u003e\n          \u003cth\u003eSTM32\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLED\u003c/td\u003e\n          \u003ctd\u003ePC0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWDIO\u003c/td\u003e\n          \u003ctd\u003eSWDIO/PA13\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWCLK\u003c/td\u003e\n          \u003ctd\u003eSWCLk/PA14\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link GND\u003c/td\u003e\n          \u003ctd\u003eGND\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link 3V3\u003c/td\u003e\n          \u003ctd\u003e3V3\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用\u003ccode\u003eType-C/USB\u003c/code\u003e给板子\u003ccode\u003e5V\u003c/code\u003e供电，\u003ccode\u003e5V\u003c/code\u003e直流通过\u003ccode\u003eLDO\u003c/code\u003e或者\u003ccode\u003eDC/DC\u003c/code\u003e转为\u003ccode\u003e3V3\u003c/code\u003e后再给相应外设板子供电，这样会更稳定，若是部分外设需要\u003ccode\u003e5V\u003c/code\u003e供电，但系统里并未接入\u003ccode\u003e5V\u003c/code\u003e直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"创建工程\"\u003e创建工程\u003c/h1\u003e\n\u003cp\u003e一般来说，可以直接使用一些别人写好的工具来创建模板（在\u003ccode\u003ecrates.io\u003c/code\u003e上可以找到），类似\u003ccode\u003eesp-generate\u003c/code\u003e这样的工具，但是，由于\u003ccode\u003erust+embassy\u003c/code\u003e一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从\u003ccode\u003ecargo new xxx\u003c/code\u003e开始一个嵌入式\u003ccode\u003erust\u003c/code\u003e的工程。\u003c/p\u003e\n\u003ch2 id=\"创建空白工程\"\u003e创建空白工程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e创建一个空白工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e打开终端，输入：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo new stm32_blinky\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：工程名最好是\u003ccode\u003esnake_case\u003c/code\u003e。\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/00_new_project.png\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e使用\u003ccode\u003evscode\u003c/code\u003e打开所创建的工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e工程目录如下图所示，标准的\u003ccode\u003ehello world\u003c/code\u003e工程。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/01_open_project.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"移植embassy\"\u003e移植\u003ccode\u003eembassy\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e参考\u003ccode\u003eembassy\u003c/code\u003e仓库的工程进行工程移植，点击跳转\u003ca href=\"https://github.com/embassy-rs/embassy/tree/main/examples/stm32f4\"\u003e\u003ccode\u003eembassy stm32f4 examples\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在自己的工程根目录里创建两个目录，并且新建文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.config/config.toml\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.vscode/settings.json\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e将以下图中内容，复制到\u003ccode\u003e.cargo/config.toml\u003c/code\u003e里\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/02_embassy_config.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# replace STM32F407VETx with your chip as listed in `probe-rs chip list`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003erunner\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;probe-rs run --chip STM32F407VETx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;thumbv7em-none-eabihf\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eDEFMT_LOG\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;trace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（\u003ccode\u003e--chip xxx\u003c/code\u003e），还有编译器（\u003ccode\u003etarget = \u0026quot;xxx\u0026quot;\u003c/code\u003e）。\u003c/p\u003e","title":"00：点亮LED（GPIO）"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"},{"content":"","permalink":"http://localhost:1313/py32/ssd1306/","summary":"","title":"Ssd1306"},{"content":"使用esp-generate生成一个初始工程 进行此实验前，务必先查看基础环境搭建，完成之后，继续完成ESP32 Rust环境搭建，\n完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（Enter）。也可以先输入esp-generate，按下回车（Enter）之后，再根据提示一步一步选择。\n1 esp-generate --chip=esp32c3 esp32c3_embassy_dht11_demo 稍微解释一下，上面这行命令的作用\n1 2 3 esp3-generate # 调用该工具 --chip=esp32c3 # 传入参数，指定芯片具体名称 esp32c3_embassy_dht11_demo # 待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告 此时，命令行会打开一个类似GUI的界面，使用键盘上的“上下左右”箭头来选择相应的feature，高亮部分即代表待选中的feature，按下回车（Enter）则会选中此项feature，并且在此feature前显示✅\nfeature前带有[▶]符号，表示该feature含有多个子feature，使用箭头选中高亮，并且按下回车（Enter）后，会打开新的界面。\n此时，高亮区域选中了▶ Flashing, logging and debugging (espflash)，按下回车（Enter），来到新的界面。\n选中下图的feature，按照从上至下排序，当前选中了2和3。\n注意：1和2只能二选一，工程里编写代码时也只能二选一，否则会报错。\n完成选定后，按下ESC，返回主界面，继续开启feature。\n此时，高亮区域选中了▶ Optional editor integration，按下回车（Enter），来到新的界面。\n这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\n选定上图feature后，继续按下ESC，回到主界面。\n此时，我们已经选定了所有feature，按下S即Save，即可保存并且生成工程。终端里也会有提示信息。\n1 2 3 🆗 Rust (stable): 1.89.0 🆗 espflash: 4.0.1 🆗 probe-rs: 0.29.1 至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\n","permalink":"http://localhost:1313/esp32/esp-generate-template/","summary":"\u003ch1 id=\"使用esp-generate生成一个初始工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成一个初始工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e进行此实验前，务必先查看\u003ca href=\"/toolchain/stm32-dev-env-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e基础环境搭建\u003c/a\u003e，完成之后，继续完成\u003ca href=\"/toolchain/esp32-dev-setup/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003eESP32 Rust环境搭建\u003c/a\u003e，\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e完成以上步骤之后，来到合适的文件目录下，最好是新建一个目录用于存放工程，在此目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）。也可以先输入\u003ccode\u003eesp-generate\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）之后，再根据提示一步一步选择。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp-generate --chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3 esp32c3_embassy_dht11_demo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e稍微解释一下，上面这行命令的作用\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp3-generate \u003cspan class=\"c1\"\u003e# 调用该工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e--chip\u003cspan class=\"o\"\u003e=\u003c/span\u003eesp32c3  \u003cspan class=\"c1\"\u003e# 传入参数，指定芯片具体名称\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eesp32c3_embassy_dht11_demo  \u003cspan class=\"c1\"\u003e#   待生成工程的工程名，推荐使用snake_case（所有单词小写，以下划线分割单词）命名，这是一个传统，也是一个约定，否则可能会有警告\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e此时，命令行会打开一个类似\u003ccode\u003eGUI\u003c/code\u003e的界面，使用键盘上的“上下左右”箭头来选择相应的\u003ccode\u003efeature\u003c/code\u003e，高亮部分即代表待选中的\u003ccode\u003efeature\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e）则会选中此项\u003ccode\u003efeature\u003c/code\u003e，并且在此\u003ccode\u003efeature\u003c/code\u003e前显示\u003cspan style=\"color: green;\"\u003e✅\u003c/span\u003e\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-00.png\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003efeature\u003c/code\u003e前带有\u003cspan style=\"color: gray;\"\u003e[▶]\u003c/span\u003e符号，表示该\u003ccode\u003efeature\u003c/code\u003e含有多个子\u003ccode\u003efeature\u003c/code\u003e，使用箭头选中高亮，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）后，会打开新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-01.png\"\u003e\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Flashing, logging and debugging (espflash)\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-02.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选中下图的\u003ccode\u003efeature\u003c/code\u003e，按照从上至下排序，当前选中了\u003ccode\u003e2\u003c/code\u003e和\u003ccode\u003e3\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-03.png\"\u003e\u003c/p\u003e\n\u003cp\u003e注意：\u003ccode\u003e1\u003c/code\u003e和\u003ccode\u003e2\u003c/code\u003e只能二选一，工程里编写代码时也只能二选一，否则会报错。\u003c/p\u003e\n\u003cp\u003e完成选定后，按下\u003ccode\u003eESC\u003c/code\u003e，返回主界面，继续开启\u003ccode\u003efeature\u003c/code\u003e。\u003c/p\u003e\n\u003cp\u003e此时，高亮区域选中了\u003ccode\u003e▶  Optional editor integration\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），来到新的界面。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-04.png\"\u003e\u003c/p\u003e\n\u003cp\u003e这个界面主要是选择你将要使用的编辑器，选定之后，可以自动配置工程适应编辑器，打开后不会报错，并且会推荐安装部分插件。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-05.png\"\u003e\u003c/p\u003e\n\u003cp\u003e选定上图\u003ccode\u003efeature\u003c/code\u003e后，继续按下\u003ccode\u003eESC\u003c/code\u003e，回到主界面。\u003c/p\u003e\n\u003cp\u003e此时，我们已经选定了所有\u003ccode\u003efeature\u003c/code\u003e，按下\u003ccode\u003eS\u003c/code\u003e即\u003ccode\u003eSave\u003c/code\u003e，即可保存并且生成工程。终端里也会有提示信息。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/template-project/esp-generate-06.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 Rust \u003cspan class=\"o\"\u003e(\u003c/span\u003estable\u003cspan class=\"o\"\u003e)\u003c/span\u003e: 1.89.0\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 espflash: 4.0.1\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e🆗 probe-rs: 0.29.1\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e至此，创建工程模板就已经完成了，之后所有的工程模板都是一样的操作流程，不同时期配置的工具链，以上工具版本信息不一致是正常现象。\u003c/p\u003e","title":"配置ESP32模板工程，此后的所有工程均可按此流程配置"},{"content":"前言和实验结果 跳过Hello World，即点亮LED，直接实战读取DHT11温湿度传感器。\n最后实现的效果如下。\n如上图，可以在终端Terminal里直接看到DHT11测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\n使用esp-generate生成模板工程 由于过程具有重复性，故不再重复演示，请点击跳转使用esp-generate生成一个ESP32初始工程\n打开工程 导入需要用到的crate，在工程根目录下打开终端，输入以下命令，并按下回车（Enter） 1 cargo add esp32-dht11-rs 在main.rs里输入以下代码\n在头部的位置，先引入需要使用的crate 1 2 use esp32_dht11_rs::{DHT11}; use esp_hal::delay::Delay; 接着，来到main函数里 1 2 3 let delay = Delay::new(); let mut dht11 = DHT11::new(peripherals.GPIO0, delay); let mut dht11_read_counter = 1; 再将以下内容复制到loop函数里 1 2 3 4 5 6 match dht11.read() { Ok(m) =\u0026gt; println!(\u0026#34;DHT11 TEMP is: {}℃ DHT11 HUMI is:{}% measuring for [NO.{:?}] time\u0026#34;, m.temperature, m.humidity, dht11_read_counter), Err(error) =\u0026gt; println!(\u0026#34;error occured: {:?}\u0026#34;, error), } Timer::after_millis(2000).await; dht11_read_counter += 1; 断电前提下，连接硬件\n功能 DHT11 ESP32C3 电源正极 VCC 3V3 地线 GND GND 数据线 D / DAT GPIO0 / 引脚 0 连接好硬件之后，将开发板连接到电脑，回到终端，输入以下命令\n需要自行安装CH34x的驱动，这一步不做说明，自行安装即可。\n1 cargo run --release 可以看到终端里在进行编译compiling。\n完成之后，会自动进行烧录，期间不需要按开发板上的任何按键（试过很多板子，都不需要按BOOT）。\n烧录完成后，正常在终端里打印信息，若是用手握住DHT11模块，湿度会瞬间上升，温度也会开始缓慢上升（假定你手现在并没有进行过冷冻处理，是正常体温。），说明模块工作正常，程序正常运行。\n","permalink":"http://localhost:1313/esp32/esp32c3_dht11/","summary":"\u003ch1 id=\"前言和实验结果\"\u003e前言和实验结果\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e跳过\u003ccode\u003eHello World\u003c/code\u003e，即点亮\u003ccode\u003eLED\u003c/code\u003e，直接实战读取\u003ccode\u003eDHT11\u003c/code\u003e温湿度传感器。\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003cp\u003e最后实现的效果如下。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/esp32/esp32c3/dht11/dht11-measuring-result.png\"\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e如上图，可以在终端\u003ccode\u003eTerminal\u003c/code\u003e里直接看到\u003ccode\u003eDHT11\u003c/code\u003e测量到的温湿度信息，无需额外的串口。终端里也支持中文信息输出，感兴趣可以自己上手实测。\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"使用esp-generate生成模板工程\"\u003e使用\u003ccode\u003eesp-generate\u003c/code\u003e生成模板工程\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003e由于过程具有重复性，故不再重复演示，请点击跳转\u003ca href=\"/esp32/esp-generate-template/\" style=\"color: #e16054ff; font-weight: bold; font-style: italic;\"\u003e使用esp-generate生成一个ESP32初始工程\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003ch1 id=\"打开工程\"\u003e打开工程\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e导入需要用到的\u003ccode\u003ecrate\u003c/code\u003e，在工程根目录下打开终端，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003ecargo\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"n\"\u003ers\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e在\u003ccode\u003emain.rs\u003c/code\u003e里输入以下代码\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e在头部的位置，先引入需要使用的\u003ccode\u003ecrate\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp32_dht11_rs\u003c/span\u003e::\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003euse\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eesp_hal\u003c/span\u003e::\u003cspan class=\"n\"\u003edelay\u003c/span\u003e::\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e接着，来到\u003ccode\u003emain\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eDelay\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"no\"\u003eDHT11\u003c/span\u003e::\u003cspan class=\"n\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eperipherals\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"no\"\u003eGPIO0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edelay\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003emut\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e再将以下内容复制到\u003ccode\u003eloop\u003c/code\u003e函数里\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ematch\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eread\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eOk\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;DHT11 TEMP is: \u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e℃ DHT11 HUMI is:\u003c/span\u003e\u003cspan class=\"si\"\u003e{}\u003c/span\u003e\u003cspan class=\"s\"\u003e% measuring for [NO.\u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e] time\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etemperature\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehumidity\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e            \u003c/span\u003e\u003cspan class=\"nb\"\u003eErr\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"fm\"\u003eprintln!\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;error occured: \u003c/span\u003e\u003cspan class=\"si\"\u003e{:?}\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eerror\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003eTimer\u003c/span\u003e::\u003cspan class=\"n\"\u003eafter_millis\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2000\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"k\"\u003eawait\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e        \u003c/span\u003e\u003cspan class=\"n\"\u003edht11_read_counter\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e+=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e断电前提下，连接硬件\u003c/p\u003e","title":"ESP32C3读取DHT11温湿度信息"},{"content":"由于已经在五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客里详细展示了如何搭建基座环境，故本篇博客，不会从头开始，只需要安装对应的target即可。\n查阅官网资料得知：\nRP 2040 Pico部分重要信息如下\nDual ARM Cortex-M0+ @ 133MHz 打开终端，安装对应的target（理解为交叉编译工具）\n1 rustup target add thumbv6m-none-eabi RP 2350 Pico2部分重要信息如下\nDual Cortex-M33 or Hazard3 processors at 150 MHz 打开终端，安装对应的target（理解为交叉编译工具） 1 rustup target add thumbv8m.main-none-eabihf 之后更新的教程，会侧重使用RP 2350 Pico2进行演示。\n","permalink":"http://localhost:1313/toolchain/rpx-picox-dev-setup/","summary":"\u003cp\u003e由于已经在\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客里详细展示了如何搭建\u003ccode\u003e基座环境\u003c/code\u003e，故本篇博客，不会从头开始，只需要安装对应的\u003ccode\u003etarget\u003c/code\u003e即可。\u003c/p\u003e\n\u003cp\u003e查阅官网资料得知：\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eRP 2040 Pico\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual ARM Cortex-M0+ @ 133MHz\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e部分重要信息如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDual Cortex-M33 or Hazard3 processors at 150 MHz\n打开终端，安装对应的\u003ccode\u003etarget\u003c/code\u003e（理解为交叉编译工具）\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv8m.main-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e之后更新的教程，会侧重使用\u003ccode\u003eRP 2350 Pico2\u003c/code\u003e进行演示。\u003c/p\u003e","title":"一分钟，搭建Rust RP 2040/2350 Pico(2)开发环境"},{"content":"注意 由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置ESP32的开发环境，请先阅读完五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海这篇博客，再继续接下来的操作。\n按照顺序，执行以下命令 只要完成了基座环境的搭建，以下步骤就不会出错，故不再搭配图片说明。\n1 2 3 4 5 6 7 8 # 根据模板生成工程 cargo install esp-generate # esp32开发包安装工具 cargo binstall espup # 安装esp32开发包 espup install # 安装烧录工具 cargo install espflash 完成以上步骤之后，ESP32的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。 ","permalink":"http://localhost:1313/toolchain/esp32-dev-setup/","summary":"\u003ch1 id=\"注意\"\u003e注意\u003c/h1\u003e\n\u003cp\u003e由于一部分工具链可以复用，理解为将之前的开发环境作为基座，所以不再要求从头开始单独配置\u003ccode\u003eESP32\u003c/code\u003e的开发环境，请先阅读完\u003ccode\u003e五分钟，带你从安装STM32 Rust嵌入式开发环境，到脱离苦海\u003c/code\u003e这篇博客，再继续接下来的操作。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"按照顺序执行以下命令\"\u003e按照顺序，执行以下命令\u003c/h1\u003e\n\u003cp\u003e只要完成了\u003ccode\u003e基座环境\u003c/code\u003e的搭建，以下步骤就不会出错，故不再搭配图片说明。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 根据模板生成工程\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install esp-generate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# esp32开发包安装工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall espup \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装esp32开发包\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eespup install\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装烧录工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install espflash\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch2 id=\"完成以上步骤之后esp32的开发环境就搭建完毕了恭喜你的技术栈又丰富了许多\"\u003e完成以上步骤之后，\u003ccode\u003eESP32\u003c/code\u003e的开发环境就搭建完毕了。恭喜，你的技术栈又丰富了许多。\u003c/h2\u003e","title":"一分钟，搭建ESP32 Rust开发环境"},{"content":"本篇博客搭建了一个Rust嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的toolchain和target即可，由于是Windows环境，为了最完美的兼容和适配，我们选择MSVC而不是GNU，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\n安装Rust 若使用国内的网络直连，安装Rust时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\n浏览器搜索并打开rsproxy.cn，可以看到其主页介绍的用法是Linux/MAC系统下的常用方式，我们侧重介绍如何在Windows系统下配置，Windows 10/Windows 11均可。 按下键盘上的Win键，输入edit environment variables for your account/环境变量，打开环境变量编辑页面。 图上是已经配置好的效果，具体操作方法如下\n点击Edit/编辑，将RUSTUP_DIST_SERVER和https://rsproxy.cn，依次填入相应位置 如法炮制，再将RUSTUP_UPDATE_ROOT和https://rsproxy.cn/rustup填入相应位置 安装Rust\nRust Installer，点击直接下载 下载完成后，双击打开即可 输入1，按下回车（Enter），之后的弹窗继续点击Yes 继续点击Continue 点击Install 等待进度条跑完 完成 完成以上步骤之后，Rust Installer会继续引导我们完成接下来的步骤 可以看到，已经识别到了host, toolchain等信息 现在输入2，并且按下回车（Enter）确认 继续回车（Enter） 输入nightly，继续回车（Enter） 接下来一直点回车（Enter）即可，以下是安装过程，耐心等待即可 命令行窗口提示：Rust is installed now. Great!，则说明安装成功 按下回车（Enter）即可 打开Visual Studio Installer，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击Modify 勾选Desktop development with C++，点击Modify，之后的弹窗点击Yes即可 等待进度条跑满（下载速度能到100MB/s，使用SSD的情况下，估计两分钟就完成了） 安装完成会再次回到这个界面，关闭即可 若只是安装Rust，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但Rust嵌入式会频繁使用到crates.io的一些crate（理解成其他语言的库/模块），所以还需要配置拉取rsproxy提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\n按下Win+E，打开资源管理器，进入C盘下的user目录，进入当前用户目录（我的是Admin，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入.cargo目录，如果顺利，你当前的PWD应该类似是这样的：C:\\Users\\Admin\\.cargo，紧接着复制rsproxy主页代码块里的配置文件 在当前目录下（C:\\Users\\Admin\\.cargo）新建一个config.toml文件，将以下toml配置，粘贴进去（可以新建一个config.txt文件，将内容粘贴进去后，再将后缀更改为toml即可） 1 2 3 4 5 6 7 8 9 10 [source.crates-io] replace-with = \u0026#39;rsproxy-sparse\u0026#39; [source.rsproxy] registry = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [source.rsproxy-sparse] registry = \u0026#34;sparse+https://rsproxy.cn/index/\u0026#34; [registries.rsproxy] index = \u0026#34;https://rsproxy.cn/crates.io-index\u0026#34; [net] git-fetch-with-cli = true 安装实用工具 代码编辑软件和插件 软件 选用vscode作为编辑器足矣 至于nvim和zed或者是其余的editor/IDE，并不适合新手入门，而且vscode也不算过时 插件 rust-lang.rust-analyzer：提供Rust LSP，当前最优秀的Rust语言服务器，vscode + RA的好用程度远超JetBrains家的RustRover fill-labs.dependi：帮助管理crate，更直观的看到当前工程下crate的版本信息 tamasfe.even-better-toml：提供toml语法高亮和补全 probe-rs.probe-rs-debugger：调试服务器 以上所有插件，直接复制名称，粘贴在vscode的插件市场的搜索栏里，回车搜索，点击安装即可 安装交叉编译工具链和下常用工具 打开命令行，输入以下命令，并按下回车（Enter），按照顺序执行即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持 # Cortex-M0 和 Cortex-M0+（无硬件浮点） rustup target add thumbv6m-none-eabi # Cortex-M3（无硬件浮点） rustup target add thumbv7m-none-eabi # Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点） rustup target add thumbv7em-none-eabi # Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点） rustup target add thumbv7em-none-eabihf # 安装 cargo-binstall，用于快速安装已打包的工具 cargo install cargo-binstall # 安装二进制工具（如 objdump/size 等） cargo install cargo-binutils # 安装 probe-rs 相关调试工具（后续用于烧录/调试） # 执行完之后，会要求输入yes/no，输入yes，回车即可 cargo binstall probe-rs-tools 安装以上工具时，会先拉取依赖的crate，再进行编译，CPU会瞬间跑满，风扇起飞，给出一个执行cargo install cargo-binstall的参考 综上，搭建了一个基础的Rust嵌入式开发环境，之后的教程主要使用STM32, ESP32, RP2040 Pico, RP2350 Pico2等MCU进行演示。\n至此，若只开发STM32常用芯片（STM32F1xx, STM32F4xx, STM32H7xx, STM32G4xx），则以上环境配置足矣，若还要继续开发其他架构的芯片，例如Cortex M33架构，则需要安装其他的交叉编译工具（若是想要提前尝鲜，也可求助LLM）。至于RP 2040/235X Pico(2)和ESP32的开发环境，会分别各自单开一篇博客来讲，若是复用到本篇博客，我也会详细注明。\nRust本身就是一门反复入门，不断卸载重装的语言，若是学习过程让你感觉到吃力，不舒服，你想继续回归C/C++嵌入式，请按照以下步骤完成卸载。\n卸载Rust嵌入式开发环境 卸载Rust及工具链\n打开CMD/Powershell，输入以下命令，并且回车（Enter）确认 1 rustup self uninstall 继续输入y，按下回车（Enter） 命令行出现以下结果，则说明卸载成功 卸载Visual Studio Community\n打开geek uninstaller，若是没有，请自行搜索安装 找到Visual Studio Community，右键，点击Uninstall 在弹出的Visual Studio Installer窗口点击OK 片刻等待之后，卸载完成 继续卸载Build Tools，点击Uninstall，继续点击OK 出现以下界面，则完成卸载 再次回到geek uninstaller，会自动弹窗清理无用注册表，点击Finish即可 完成以上步骤之后，Rust嵌入式开发便与你再无交集，恭喜脱离苦海。\n视频版本，可以点击跳转到Bilibili观看 视频录制的时间可能有些早，但是内容完全一样，若是视频无法复现，可以先按照博客的图文进行操作，若还是失败，可以在视频平台给我私信。\n","permalink":"http://localhost:1313/toolchain/stm32-dev-env-setup/","summary":"\u003cp\u003e本篇博客搭建了一个\u003ccode\u003eRust\u003c/code\u003e嵌入式开发的基础环境，不同的芯片，只需要在此基础上安装对应的\u003ccode\u003etoolchain\u003c/code\u003e和\u003ccode\u003etarget\u003c/code\u003e即可，由于是\u003ccode\u003eWindows\u003c/code\u003e环境，为了最完美的兼容和适配，我们选择\u003ccode\u003eMSVC\u003c/code\u003e而不是\u003ccode\u003eGNU\u003c/code\u003e，这是长期实践下来比较完美的方案，若你是新手，无脑照抄即可。\u003c/p\u003e\n\u003ch1 id=\"安装rust\"\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/h1\u003e\n\u003cp\u003e若使用国内的网络直连，安装\u003ccode\u003eRust\u003c/code\u003e时可能会耗费大量时间在下载环节，所以先配置一下代理（合理合法，免费使用）。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e浏览器搜索并打开\u003ca href=\"rsproxy.cn\"\u003e\u003ccode\u003ersproxy.cn\u003c/code\u003e\u003c/a\u003e，可以看到其主页介绍的用法是\u003ccode\u003eLinux\u003c/code\u003e/\u003ccode\u003eMAC\u003c/code\u003e系统下的常用方式，我们侧重介绍如何在\u003ccode\u003eWindows\u003c/code\u003e系统下配置，\u003ccode\u003eWindows 10\u003c/code\u003e/\u003ccode\u003eWindows 11\u003c/code\u003e均可。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_main_page.png\"\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e按下键盘上的\u003ccode\u003eWin\u003c/code\u003e键，输入\u003ccode\u003eedit environment variables for your account\u003c/code\u003e/\u003ccode\u003e环境变量\u003c/code\u003e，打开环境变量编辑页面。\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/env_variable_overview.png\"\u003e\n图上是已经配置好的效果，具体操作方法如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e点击\u003ccode\u003eEdit\u003c/code\u003e/\u003ccode\u003e编辑\u003c/code\u003e，将\u003ccode\u003eRUSTUP_DIST_SERVER\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn\u003c/code\u003e，依次填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_server.png\"\u003e\u003c/li\u003e\n\u003cli\u003e如法炮制，再将\u003ccode\u003eRUSTUP_UPDATE_ROOT\u003c/code\u003e和\u003ccode\u003ehttps://rsproxy.cn/rustup\u003c/code\u003e填入相应位置\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_updateroot.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e安装\u003ccode\u003eRust\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe\"\u003e\u003ccode\u003eRust Installer\u003c/code\u003e\u003c/a\u003e，点击直接下载\u003c/li\u003e\n\u003cli\u003e下载完成后，双击打开即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_00.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003e1\u003c/code\u003e，按下回车（\u003ccode\u003eEnter\u003c/code\u003e），之后的弹窗继续点击\u003ccode\u003eYes\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e继续点击\u003ccode\u003eContinue\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_01.png\"\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_02.png\"\u003e\u003c/li\u003e\n\u003cli\u003e点击\u003ccode\u003eInstall\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_03.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑完\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_04.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_05.png\"\u003e\u003c/li\u003e\n\u003cli\u003e完成以上步骤之后，\u003ccode\u003eRust Installer\u003c/code\u003e会继续引导我们完成接下来的步骤\n\u003cul\u003e\n\u003cli\u003e可以看到，已经识别到了\u003ccode\u003ehost\u003c/code\u003e, \u003ccode\u003etoolchain\u003c/code\u003e等信息\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_06.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在输入\u003ccode\u003e2\u003c/code\u003e，并且按下回车（\u003ccode\u003eEnter\u003c/code\u003e）确认\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_07.png\"\u003e\u003c/li\u003e\n\u003cli\u003e继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_08.png\"\u003e\u003c/li\u003e\n\u003cli\u003e输入\u003ccode\u003enightly\u003c/code\u003e，继续回车（\u003ccode\u003eEnter\u003c/code\u003e）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_09.png\"\u003e\u003c/li\u003e\n\u003cli\u003e接下来一直点回车（\u003ccode\u003eEnter\u003c/code\u003e）即可，以下是安装过程，耐心等待即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_10.png\"\u003e\u003c/li\u003e\n\u003cli\u003e命令行窗口提示：\u003ccode\u003eRust is installed now. Great!\u003c/code\u003e，则说明安装成功\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_11.png\"\u003e\u003c/li\u003e\n\u003cli\u003e按下回车（\u003ccode\u003eEnter\u003c/code\u003e）即可\u003c/li\u003e\n\u003cli\u003e打开\u003ccode\u003eVisual Studio Installer\u003c/code\u003e，安装一些必备组件，之后编译项目或者工具的时候需要用到，点击\u003ccode\u003eModify\u003c/code\u003e\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_12.png\"\u003e\u003c/li\u003e\n\u003cli\u003e勾选\u003ccode\u003eDesktop development with C++\u003c/code\u003e，点击\u003ccode\u003eModify\u003c/code\u003e，之后的弹窗点击\u003ccode\u003eYes\u003c/code\u003e即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_13.png\"\u003e\u003c/li\u003e\n\u003cli\u003e等待进度条跑满（下载速度能到\u003ccode\u003e100MB/s\u003c/code\u003e，使用\u003ccode\u003eSSD\u003c/code\u003e的情况下，估计两分钟就完成了）\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_14.png\"\u003e\u003c/li\u003e\n\u003cli\u003e安装完成会再次回到这个界面，关闭即可\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rust_install_15.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e若只是安装\u003ccode\u003eRust\u003c/code\u003e，并且只是用标准库（无法做嵌入式开发），则完成以上步骤即可，但\u003ccode\u003eRust\u003c/code\u003e嵌入式会频繁使用到\u003ca href=\"https://crates.io/\"\u003e\u003ccode\u003ecrates.io\u003c/code\u003e\u003c/a\u003e的一些\u003ccode\u003ecrate\u003c/code\u003e（理解成其他语言的库/模块），所以还需要配置拉取\u003ccode\u003ersproxy\u003c/code\u003e提供的镜像（一分钟更新一次，可以近似理解为不会过时），具体操作步骤如下\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e按下\u003ccode\u003eWin\u003c/code\u003e+\u003ccode\u003eE\u003c/code\u003e，打开资源管理器，进入\u003ccode\u003eC\u003c/code\u003e盘下的\u003ccode\u003euser\u003c/code\u003e目录，进入当前用户目录（我的是\u003ccode\u003eAdmin\u003c/code\u003e，顺便一提，用户名最好是英文或者数字，不要用中文或者夹杂一些其他符号），继续进入\u003ccode\u003e.cargo\u003c/code\u003e目录，如果顺利，你当前的\u003ccode\u003ePWD\u003c/code\u003e应该类似是这样的：\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e，紧接着复制\u003ccode\u003ersproxy\u003c/code\u003e主页代码块里的配置文件\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/rsproxy_crates_io.png\"\u003e\u003c/li\u003e\n\u003cli\u003e在当前目录下（\u003ccode\u003eC:\\Users\\Admin\\.cargo\u003c/code\u003e）新建一个\u003ccode\u003econfig.toml\u003c/code\u003e文件，将以下\u003ccode\u003etoml\u003c/code\u003e配置，粘贴进去（可以新建一个\u003ccode\u003econfig.txt\u003c/code\u003e文件，将内容粘贴进去后，再将后缀更改为\u003ccode\u003etoml\u003c/code\u003e即可）\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ecrates-io\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003ereplace-with\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;rsproxy-sparse\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003esource\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy-sparse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eregistry\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;sparse+https://rsproxy.cn/index/\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eregistries\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ersproxy\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;https://rsproxy.cn/crates.io-index\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enet\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egit-fetch-with-cli\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e   \n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003ch1 id=\"安装实用工具\"\u003e安装实用工具\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e代码编辑软件和插件\n\u003cul\u003e\n\u003cli\u003e软件\n\u003cul\u003e\n\u003cli\u003e选用\u003ccode\u003evscode\u003c/code\u003e作为编辑器足矣\n\u003cul\u003e\n\u003cli\u003e至于\u003ccode\u003envim\u003c/code\u003e和\u003ccode\u003ezed\u003c/code\u003e或者是其余的\u003ccode\u003eeditor\u003c/code\u003e/\u003ccode\u003eIDE\u003c/code\u003e，并不适合新手入门，而且\u003ccode\u003evscode\u003c/code\u003e也不算过时\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e插件\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erust-lang.rust-analyzer\u003c/code\u003e：提供\u003ccode\u003eRust LSP\u003c/code\u003e，当前最优秀的\u003ccode\u003eRust\u003c/code\u003e语言服务器，\u003ccode\u003evscode + RA\u003c/code\u003e的好用程度远超\u003ccode\u003eJetBrains\u003c/code\u003e家的\u003ccode\u003eRustRover\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003efill-labs.dependi\u003c/code\u003e：帮助管理\u003ccode\u003ecrate\u003c/code\u003e，更直观的看到当前工程下\u003ccode\u003ecrate\u003c/code\u003e的版本信息\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003etamasfe.even-better-toml\u003c/code\u003e：提供\u003ccode\u003etoml\u003c/code\u003e语法高亮和补全\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs.probe-rs-debugger\u003c/code\u003e：调试服务器\n\u003cul\u003e\n\u003cli\u003e以上所有插件，直接复制名称，粘贴在\u003ccode\u003evscode\u003c/code\u003e的插件市场的搜索栏里，回车搜索，点击安装即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e安装交叉编译工具链和下常用工具\n\u003cul\u003e\n\u003cli\u003e打开命令行，输入以下命令，并按下回车（\u003ccode\u003eEnter\u003c/code\u003e），按照顺序执行即可\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e 1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e 9\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e10\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e11\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e12\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e13\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e14\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e15\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e16\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e17\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e18\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e19\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e20\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e21\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e22\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e23\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 请自行查阅数据手册确定自己的芯片架构和硬件浮点支持\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M0 和 Cortex-M0+（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv6m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M3（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7m-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4（无硬件浮点）和 Cortex-M7（无硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabi\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Cortex-M4F（带硬件浮点）和 Cortex-M7F（带硬件浮点）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003erustup target add thumbv7em-none-eabihf\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 cargo-binstall，用于快速安装已打包的工具\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binstall\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装二进制工具（如 objdump/size 等）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo install cargo-binutils\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安装 probe-rs 相关调试工具（后续用于烧录/调试）\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 执行完之后，会要求输入yes/no，输入yes，回车即可\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo binstall probe-rs-tools\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cul\u003e\n\u003cli\u003e安装以上工具时，会先拉取依赖的\u003ccode\u003ecrate\u003c/code\u003e，再进行编译，\u003ccode\u003eCPU\u003c/code\u003e会瞬间跑满，风扇起飞，给出一个执行\u003ccode\u003ecargo install cargo-binstall\u003c/code\u003e的参考\n\u003cimg loading=\"lazy\" src=\"/toolchain-images/tools_compling_process.png\"\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e综上，搭建了一个基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式开发环境，之后的教程主要使用\u003ccode\u003eSTM32\u003c/code\u003e, \u003ccode\u003eESP32\u003c/code\u003e, \u003ccode\u003eRP2040 Pico, RP2350 Pico2\u003c/code\u003e等\u003ccode\u003eMCU\u003c/code\u003e进行演示。\u003c/p\u003e","title":"五分钟，搭建Rust嵌入式开发环境"},{"content":" ","permalink":"http://localhost:1313/rp/blinky/","summary":"\u003chr\u003e","title":"Blinky"},{"content":" Overview🦀 What offered？\n基础的Rust嵌入式知识。 防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。 关键词 vscode ：“最好用”的代码编辑器 bash ：编写特定的自动化脚本 python ：图像处理，简单GUI快速实现，自动化脚本编写 probe-rs ：调试嵌入式程序，或许你没听过，但这不是重点 STM32CubeMX ：查看STM32系列芯片的外设，利好PCB设计 Adobe illustrator：快速绘制异形板框 Anaconda ：管理Python开发环境，一个开发场景使用一个特定的Python环境 embassy ：Rust嵌入式的异步框架，目前较为成熟的开发框架 2/4层PCB设计知识，快速验证Demo KiCAD ：开源PCB设计软件 Altium Designer(trial version) ： 芯片原厂都在使用的PCB设计软件 me \u0026amp; rustmcu MCU STM32 Fxx Hxx ESP32 ESP32C3 ESP32C6 ESP32S3 RP Pico RP2040 Pico Rp235x Pico2 现在还是学生，尚未工作 建站仅是记录，顺便分享 教程未必严谨，按需学习 ","permalink":"http://localhost:1313/home/intro/","summary":"\u003chr\u003e\n\u003ch1 id=\"overview\"\u003eOverview🦀\u003c/h1\u003e\n\u003cblockquote\u003e\n\u003cp\u003eWhat offered？\u003c/p\u003e\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e基础的\u003ccode\u003eRust\u003c/code\u003e嵌入式知识。\n\u003cul\u003e\n\u003cli\u003e防止劝退，不会从寄存器开发讲起，大多数时候，仅会演示如何编写模块驱动，或是协调多个模块工作。\u003c/li\u003e\n\u003cli\u003e关键词\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003evscode\u003c/code\u003e      ：“最好用”的代码编辑器\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ebash\u003c/code\u003e        ：编写特定的自动化脚本\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003epython\u003c/code\u003e      ：图像处理，简单\u003ccode\u003eGUI\u003c/code\u003e快速实现，自动化脚本编写\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eprobe-rs\u003c/code\u003e    ：调试嵌入式程序，或许你没听过，但这不是重点\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eSTM32CubeMX\u003c/code\u003e ：查看\u003ccode\u003eSTM32\u003c/code\u003e系列芯片的外设，利好\u003ccode\u003ePCB\u003c/code\u003e设计\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAdobe illustrator\u003c/code\u003e：快速绘制异形板框\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAnaconda\u003c/code\u003e    ：管理\u003ccode\u003ePython\u003c/code\u003e开发环境，一个开发场景使用一个特定的\u003ccode\u003ePython\u003c/code\u003e环境\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eembassy\u003c/code\u003e     ：\u003ccode\u003eRust\u003c/code\u003e嵌入式的异步框架，目前较为成熟的开发框架\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003e2/4\u003c/code\u003e层PCB设计知识，快速验证Demo\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eKiCAD\u003c/code\u003e         ：开源PCB设计软件\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eAltium Designer(trial version)\u003c/code\u003e  ：  芯片原厂都在使用的PCB设计软件\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"me--rustmcu\"\u003eme \u0026amp; rustmcu\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003eMCU\n\u003cul\u003e\n\u003cli\u003eSTM32\n\u003cul\u003e\n\u003cli\u003eFxx\u003c/li\u003e\n\u003cli\u003eHxx\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eESP32\n\u003cul\u003e\n\u003cli\u003eESP32C3\u003c/li\u003e\n\u003cli\u003eESP32C6\u003c/li\u003e\n\u003cli\u003eESP32S3\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eRP Pico\n\u003cul\u003e\n\u003cli\u003eRP2040 Pico\u003c/li\u003e\n\u003cli\u003eRp235x Pico2\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e现在还是学生，尚未工作\u003c/li\u003e\n\u003cli\u003e建站仅是记录，顺便分享\u003c/li\u003e\n\u003cli\u003e教程未必严谨，按需学习\u003c/li\u003e\n\u003c/ul\u003e","title":"博客介绍"},{"content":" 硬件准备 STM32开发板*1 烧录器*1 推荐使用ST-Link LED*1 若有板载LED，则无需准备 杜邦线若干 硬件接线 Peri STM32 LED PC0 ST-Link SWDIO SWDIO/PA13 ST-Link SWCLK SWCLk/PA14 ST-Link GND GND ST-Link 3V3 3V3 电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用Type-C/USB给板子5V供电，5V直流通过LDO或者DC/DC转为3V3后再给相应外设板子供电，这样会更稳定，若是部分外设需要5V供电，但系统里并未接入5V直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\n创建工程 一般来说，可以直接使用一些别人写好的工具来创建模板（在crates.io上可以找到），类似esp-generate这样的工具，但是，由于rust+embassy一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从cargo new xxx开始一个嵌入式rust的工程。\n创建空白工程 创建一个空白工程 打开终端，输入：\n1 cargo new stm32_blinky 注意：工程名最好是snake_case。 使用vscode打开所创建的工程 工程目录如下图所示，标准的hello world工程。\n移植embassy 参考embassy仓库的工程进行工程移植，点击跳转embassy stm32f4 examples\n在自己的工程根目录里创建两个目录，并且新建文件\n1 2 .config/config.toml .vscode/settings.json 将以下图中内容，复制到.cargo/config.toml里 1 2 3 4 5 6 7 8 9 [target.\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;] # replace STM32F407VETx with your chip as listed in `probe-rs chip list` runner = \u0026#34;probe-rs run --chip STM32F407VETx\u0026#34; [build] target = \u0026#34;thumbv7em-none-eabihf\u0026#34; [env] DEFMT_LOG = \u0026#34;trace\u0026#34; 注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（--chip xxx），还有编译器（target = \u0026quot;xxx\u0026quot;）。\n具体做法是：\n先看自己的开发板是什么型号，例如，我手里的是STM32F407VET6，这个型号在购买开发板的时候可以看到，也可以在芯片上直接读到，由于不确定配置文件里的芯片名称格式，所以需要使用probe-rs提供的命令来查看支持的芯片还有格式书写。\n在终端里输入 1 probe-rs chip list 可以看到，支持的芯片很多，但由于显示的问题，只显示了部分芯片型号。 所以需要进行筛选，确定具体的型号。\n注意，以下命令需要在git bash里进行，若是linux/mac则无需注意。\n在终端里输入 1 probe-rs chip list | grep STM32F4 可以看到，已经筛选出了F4系列的芯片，进一步缩小范围。\n在终端里输入 1 probe-rs chip list | grep STM32F407 可以看到，所列出的芯片型号中，STM32F407VE与我手里的STM32F407VET6就十分接近，那就选这个STM32F407VE填到.cargo/config.toml文件中--chip xxx的位置。\n当然，也可以使用\n1 probe-rs chip list | grep STM32* \u0026gt; chip.txt 将STM32系列的芯片型号，保存到一个chip.txt的文件里，再去手动查找。 在.vscode/settings.json里粘贴以下内容 1 2 3 { \u0026#34;rust-analyzer.check.allTargets\u0026#34;: false } 使用rust做嵌入式开发时，需要no-std，使用以上配置文件，就可以屏蔽报错。\n复制embassy examples里的build.rs到自己的工程里 1 2 3 4 5 fn main() { println!(\u0026#34;cargo:rustc-link-arg-bins=--nmagic\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tlink.x\u0026#34;); println!(\u0026#34;cargo:rustc-link-arg-bins=-Tdefmt.x\u0026#34;); } 复制必要的依赖配置到根目录里的Cargo.toml文件里 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [package] name = \u0026#34;stm32_blinky\u0026#34; version = \u0026#34;0.1.0\u0026#34; edition = \u0026#34;2024\u0026#34; [dependencies] embassy-stm32 = { version = \u0026#34;0.4.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;stm32f407ve\u0026#34;, \u0026#34;unstable-pac\u0026#34;, \u0026#34;memory-x\u0026#34;, \u0026#34;time-driver-any\u0026#34;, \u0026#34;exti\u0026#34;, \u0026#34;chrono\u0026#34;] } embassy-sync = { version = \u0026#34;0.7.2\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-executor = { version = \u0026#34;0.9.0\u0026#34;, features = [\u0026#34;arch-cortex-m\u0026#34;, \u0026#34;executor-thread\u0026#34;, \u0026#34;executor-interrupt\u0026#34;, \u0026#34;defmt\u0026#34;] } embassy-time = { version = \u0026#34;0.5.0\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;defmt-timestamp-uptime\u0026#34;, \u0026#34;tick-hz-32_768\u0026#34;] } embassy-usb = { version = \u0026#34;0.5.1\u0026#34;, features = [\u0026#34;defmt\u0026#34; ] } embassy-net = { version = \u0026#34;0.7.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;, \u0026#34;tcp\u0026#34;, \u0026#34;dhcpv4\u0026#34;, \u0026#34;medium-ethernet\u0026#34;, ] } embassy-net-wiznet = { version = \u0026#34;0.2.1\u0026#34;, features = [\u0026#34;defmt\u0026#34;] } embassy-futures = { version = \u0026#34;0.1.2\u0026#34;} defmt = \u0026#34;1.0.1\u0026#34; defmt-rtt = \u0026#34;1.0.0\u0026#34; cortex-m = { version = \u0026#34;0.7.6\u0026#34;, features = [\u0026#34;inline-asm\u0026#34;, \u0026#34;critical-section-single-core\u0026#34;] } cortex-m-rt = \u0026#34;0.7.0\u0026#34; embedded-hal = \u0026#34;0.2.6\u0026#34; embedded-hal-bus = { version = \u0026#34;0.2\u0026#34;, features = [\u0026#34;async\u0026#34;] } embedded-io = { version = \u0026#34;0.6.0\u0026#34; } embedded-io-async = { version = \u0026#34;0.6.1\u0026#34; } panic-probe = { version = \u0026#34;1.0.0\u0026#34;, features = [\u0026#34;print-defmt\u0026#34;] } futures-util = { version = \u0026#34;0.3.30\u0026#34;, default-features = false } heapless = { version = \u0026#34;0.8\u0026#34;, default-features = false } critical-section = \u0026#34;1.1\u0026#34; nb = \u0026#34;1.0.0\u0026#34; embedded-storage = \u0026#34;0.3.1\u0026#34; micromath = \u0026#34;2.0.0\u0026#34; usbd-hid = \u0026#34;0.8.1\u0026#34; static_cell = \u0026#34;2\u0026#34; chrono = { version = \u0026#34;^0.4\u0026#34;, default-features = false} [profile.release] debug = 2 注意：以上配置，均是来自embassy仓库，只是将path字段删除了，在编译的时候，会自动在线拉取，因为我们并没有将这些库拉取到本地，所以这个字段可以删除，当然也有其他配置的方式，例如指定git，大家感兴趣可以自行去探索。\n大家可以自行对比，进行移植。最简单的方式就是复制上面的配置文件到自己的Cargo.toml文件里，再将embassy-stm32 = { version = \u0026quot;0.4.0\u0026quot;, features = [\u0026quot;defmt\u0026quot;, \u0026quot;stm32f407ve\u0026quot;, \u0026quot;unstable-pac\u0026quot;, \u0026quot;memory-x\u0026quot;, \u0026quot;time-driver-any\u0026quot;, \u0026quot;exti\u0026quot;, \u0026quot;chrono\u0026quot;] }这个依赖里的stm32f407ve修改为前文教大家适配的自己的芯片型号即可。\n编写代码点灯 完成了以上工程创建之后，就可以开始写代码点灯了。当然了，第一次，还是直接复制粘贴，局部调整即可。\n将以下代码，粘贴到main.rs里。\nCV 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #![no_std] #![no_main] use defmt::*; use embassy_executor::Spawner; use embassy_stm32::gpio::{Level, Output, Speed}; use embassy_time::Timer; use {defmt_rtt as _, panic_probe as _}; #[embassy_executor::main] async fn main(_spawner: Spawner) { let p = embassy_stm32::init(Default::default()); info!(\u0026#34;Hello World!\u0026#34;); let mut led = Output::new(p.PC0, Level::High, Speed::Low); loop { info!(\u0026#34;high\u0026#34;); led.set_high(); Timer::after_millis(300).await; info!(\u0026#34;low\u0026#34;); led.set_low(); Timer::after_millis(300).await; } } 只需要将PC0修改为自己板子所连接LED的引脚即可。\n1 let mut led = Output::new(p.PC0, Level::High, Speed::Low); 烧录 确保烧录器、开发板、电脑连接无误，供电正常。\n打开终端，输入\n1 cargo run --release 开始编译，可以看到编译进度。\n编译完成后，开始下载，并且会在终端里打印出info函数里的内容。（可以用来做类似串口调试的工具。）\n至此，恭喜你完成了在STM32单片机上，使用RUST语言点灯。\n所有的伟大，源于一个勇敢的开始。😊\n","permalink":"http://localhost:1313/stm32/blinky/","summary":"\u003chr\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/memes/exhausted.jpg\"\u003e\u003c/p\u003e\n\u003ch1 id=\"硬件准备\"\u003e硬件准备\u003c/h1\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eSTM32\u003c/code\u003e开发板*1\u003c/li\u003e\n\u003cli\u003e烧录器*1\n\u003cul\u003e\n\u003cli\u003e推荐使用\u003ccode\u003eST-Link\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eLED\u003c/code\u003e*1\n\u003cul\u003e\n\u003cli\u003e若有板载\u003ccode\u003eLED\u003c/code\u003e，则无需准备\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e杜邦线若干\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch1 id=\"硬件接线\"\u003e硬件接线\u003c/h1\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003ePeri\u003c/th\u003e\n          \u003cth\u003eSTM32\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eLED\u003c/td\u003e\n          \u003ctd\u003ePC0\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWDIO\u003c/td\u003e\n          \u003ctd\u003eSWDIO/PA13\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link SWCLK\u003c/td\u003e\n          \u003ctd\u003eSWCLk/PA14\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link GND\u003c/td\u003e\n          \u003ctd\u003eGND\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003eST-Link 3V3\u003c/td\u003e\n          \u003ctd\u003e3V3\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e电路部分，如上表即可，不涉及其他外设，这样简单接线就可以工作，但是更推荐的做法是，使用\u003ccode\u003eType-C/USB\u003c/code\u003e给板子\u003ccode\u003e5V\u003c/code\u003e供电，\u003ccode\u003e5V\u003c/code\u003e直流通过\u003ccode\u003eLDO\u003c/code\u003e或者\u003ccode\u003eDC/DC\u003c/code\u003e转为\u003ccode\u003e3V3\u003c/code\u003e后再给相应外设板子供电，这样会更稳定，若是部分外设需要\u003ccode\u003e5V\u003c/code\u003e供电，但系统里并未接入\u003ccode\u003e5V\u003c/code\u003e直流，则会导致外设无响应，或工作不正常，这是需要注意的一个点。\u003c/p\u003e\n\u003chr\u003e\n\u003ch1 id=\"创建工程\"\u003e创建工程\u003c/h1\u003e\n\u003cp\u003e一般来说，可以直接使用一些别人写好的工具来创建模板（在\u003ccode\u003ecrates.io\u003c/code\u003e上可以找到），类似\u003ccode\u003eesp-generate\u003c/code\u003e这样的工具，但是，由于\u003ccode\u003erust+embassy\u003c/code\u003e一直都很活跃，使用别人的模板，难以保证体验最新特性，所以，介绍一下如何从\u003ccode\u003ecargo new xxx\u003c/code\u003e开始一个嵌入式\u003ccode\u003erust\u003c/code\u003e的工程。\u003c/p\u003e\n\u003ch2 id=\"创建空白工程\"\u003e创建空白工程\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e创建一个空白工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e打开终端，输入：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ecargo new stm32_blinky\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：工程名最好是\u003ccode\u003esnake_case\u003c/code\u003e。\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/00_new_project.png\"\u003e\u003c/p\u003e\n\u003col start=\"2\"\u003e\n\u003cli\u003e使用\u003ccode\u003evscode\u003c/code\u003e打开所创建的工程\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003e工程目录如下图所示，标准的\u003ccode\u003ehello world\u003c/code\u003e工程。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/01_open_project.png\"\u003e\u003c/p\u003e\n\u003ch2 id=\"移植embassy\"\u003e移植\u003ccode\u003eembassy\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003e参考\u003ccode\u003eembassy\u003c/code\u003e仓库的工程进行工程移植，点击跳转\u003ca href=\"https://github.com/embassy-rs/embassy/tree/main/examples/stm32f4\"\u003e\u003ccode\u003eembassy stm32f4 examples\u003c/code\u003e\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e在自己的工程根目录里创建两个目录，并且新建文件\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-plaintext\" data-lang=\"plaintext\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.config/config.toml\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.vscode/settings.json\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e将以下图中内容，复制到\u003ccode\u003e.cargo/config.toml\u003c/code\u003e里\n\u003cimg loading=\"lazy\" src=\"/stm32/01-blinky/02_embassy_config.png\"\u003e\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv class=\"chroma\"\u003e\n\u003ctable class=\"lntable\"\u003e\u003ctr\u003e\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode\u003e\u003cspan class=\"lnt\"\u003e1\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e2\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e3\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e4\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e5\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e6\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e7\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e8\n\u003c/span\u003e\u003cspan class=\"lnt\"\u003e9\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd class=\"lntd\"\u003e\n\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-toml\" data-lang=\"toml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;cfg(all(target_arch = \u0026#34;arm\u0026#34;, target_os = \u0026#34;none\u0026#34;))\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c\"\u003e# replace STM32F407VETx with your chip as listed in `probe-rs chip list`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003erunner\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;probe-rs run --chip STM32F407VETx\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ebuild\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003etarget\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;thumbv7em-none-eabihf\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eenv\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003eDEFMT_LOG\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;trace\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e注意：以上内容并不是照抄，需要按照自己的开发板具体型号来适配芯片名称（\u003ccode\u003e--chip xxx\u003c/code\u003e），还有编译器（\u003ccode\u003etarget = \u0026quot;xxx\u0026quot;\u003c/code\u003e）。\u003c/p\u003e","title":"00：点亮LED（GPIO）"},{"content":"这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖PCB设计，大模型微调（你没听错，你甚至能在一个RUST MCU的博客里看到微调大模型的技巧），上位机开发，Rust嵌入式小项目，C嵌入式，Rust编写实用工具等内容。\n","permalink":"http://localhost:1313/miscellanea/miscellanea/","summary":"\u003cp\u003e这一部分主要整合一些不方便进行归类的内容，其中可能会涵盖\u003ccode\u003ePCB\u003c/code\u003e设计，\u003ccode\u003e大模型微调\u003c/code\u003e（你没听错，你甚至能在一个\u003ccode\u003eRUST MCU\u003c/code\u003e的博客里看到微调大模型的技巧），\u003ccode\u003e上位机\u003c/code\u003e开发，\u003ccode\u003eRust嵌入式小项目\u003c/code\u003e，\u003ccode\u003eC\u003c/code\u003e嵌入式，\u003ccode\u003eRust\u003c/code\u003e编写实用工具等内容。\u003c/p\u003e\n\u003chr\u003e","title":"杂记/小记/章节介绍"}]